

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Oct 11 13:18:46 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     8                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    29                           	dabs	1,0x7E,2
    30     0000                     
    31                           ; Version 2.20
    32                           ; Generated 12/02/2020 GMT
    33                           ; 
    34                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC16F877A Definitions
    63                           ; 
    64                           ; SFR Addresses
    65     0000                     	;# 
    66     0001                     	;# 
    67     0002                     	;# 
    68     0003                     	;# 
    69     0004                     	;# 
    70     0005                     	;# 
    71     0006                     	;# 
    72     0007                     	;# 
    73     0008                     	;# 
    74     0009                     	;# 
    75     000A                     	;# 
    76     000B                     	;# 
    77     000C                     	;# 
    78     000D                     	;# 
    79     000E                     	;# 
    80     000E                     	;# 
    81     000F                     	;# 
    82     0010                     	;# 
    83     0011                     	;# 
    84     0012                     	;# 
    85     0013                     	;# 
    86     0014                     	;# 
    87     0015                     	;# 
    88     0015                     	;# 
    89     0016                     	;# 
    90     0017                     	;# 
    91     0018                     	;# 
    92     0019                     	;# 
    93     001A                     	;# 
    94     001B                     	;# 
    95     001B                     	;# 
    96     001C                     	;# 
    97     001D                     	;# 
    98     001E                     	;# 
    99     001F                     	;# 
   100     0081                     	;# 
   101     0085                     	;# 
   102     0086                     	;# 
   103     0087                     	;# 
   104     0088                     	;# 
   105     0089                     	;# 
   106     008C                     	;# 
   107     008D                     	;# 
   108     008E                     	;# 
   109     0091                     	;# 
   110     0092                     	;# 
   111     0093                     	;# 
   112     0094                     	;# 
   113     0098                     	;# 
   114     0099                     	;# 
   115     009C                     	;# 
   116     009D                     	;# 
   117     009E                     	;# 
   118     009F                     	;# 
   119     010C                     	;# 
   120     010D                     	;# 
   121     010E                     	;# 
   122     010F                     	;# 
   123     018C                     	;# 
   124     018D                     	;# 
   125     0000                     	;# 
   126     0001                     	;# 
   127     0002                     	;# 
   128     0003                     	;# 
   129     0004                     	;# 
   130     0005                     	;# 
   131     0006                     	;# 
   132     0007                     	;# 
   133     0008                     	;# 
   134     0009                     	;# 
   135     000A                     	;# 
   136     000B                     	;# 
   137     000C                     	;# 
   138     000D                     	;# 
   139     000E                     	;# 
   140     000E                     	;# 
   141     000F                     	;# 
   142     0010                     	;# 
   143     0011                     	;# 
   144     0012                     	;# 
   145     0013                     	;# 
   146     0014                     	;# 
   147     0015                     	;# 
   148     0015                     	;# 
   149     0016                     	;# 
   150     0017                     	;# 
   151     0018                     	;# 
   152     0019                     	;# 
   153     001A                     	;# 
   154     001B                     	;# 
   155     001B                     	;# 
   156     001C                     	;# 
   157     001D                     	;# 
   158     001E                     	;# 
   159     001F                     	;# 
   160     0081                     	;# 
   161     0085                     	;# 
   162     0086                     	;# 
   163     0087                     	;# 
   164     0088                     	;# 
   165     0089                     	;# 
   166     008C                     	;# 
   167     008D                     	;# 
   168     008E                     	;# 
   169     0091                     	;# 
   170     0092                     	;# 
   171     0093                     	;# 
   172     0094                     	;# 
   173     0098                     	;# 
   174     0099                     	;# 
   175     009C                     	;# 
   176     009D                     	;# 
   177     009E                     	;# 
   178     009F                     	;# 
   179     010C                     	;# 
   180     010D                     	;# 
   181     010E                     	;# 
   182     010F                     	;# 
   183     018C                     	;# 
   184     018D                     	;# 
   185     0000                     	;# 
   186     0001                     	;# 
   187     0002                     	;# 
   188     0003                     	;# 
   189     0004                     	;# 
   190     0005                     	;# 
   191     0006                     	;# 
   192     0007                     	;# 
   193     0008                     	;# 
   194     0009                     	;# 
   195     000A                     	;# 
   196     000B                     	;# 
   197     000C                     	;# 
   198     000D                     	;# 
   199     000E                     	;# 
   200     000E                     	;# 
   201     000F                     	;# 
   202     0010                     	;# 
   203     0011                     	;# 
   204     0012                     	;# 
   205     0013                     	;# 
   206     0014                     	;# 
   207     0015                     	;# 
   208     0015                     	;# 
   209     0016                     	;# 
   210     0017                     	;# 
   211     0018                     	;# 
   212     0019                     	;# 
   213     001A                     	;# 
   214     001B                     	;# 
   215     001B                     	;# 
   216     001C                     	;# 
   217     001D                     	;# 
   218     001E                     	;# 
   219     001F                     	;# 
   220     0081                     	;# 
   221     0085                     	;# 
   222     0086                     	;# 
   223     0087                     	;# 
   224     0088                     	;# 
   225     0089                     	;# 
   226     008C                     	;# 
   227     008D                     	;# 
   228     008E                     	;# 
   229     0091                     	;# 
   230     0092                     	;# 
   231     0093                     	;# 
   232     0094                     	;# 
   233     0098                     	;# 
   234     0099                     	;# 
   235     009C                     	;# 
   236     009D                     	;# 
   237     009E                     	;# 
   238     009F                     	;# 
   239     010C                     	;# 
   240     010D                     	;# 
   241     010E                     	;# 
   242     010F                     	;# 
   243     018C                     	;# 
   244     018D                     	;# 
   245     0000                     	;# 
   246     0001                     	;# 
   247     0002                     	;# 
   248     0003                     	;# 
   249     0004                     	;# 
   250     0005                     	;# 
   251     0006                     	;# 
   252     0007                     	;# 
   253     0008                     	;# 
   254     0009                     	;# 
   255     000A                     	;# 
   256     000B                     	;# 
   257     000C                     	;# 
   258     000D                     	;# 
   259     000E                     	;# 
   260     000E                     	;# 
   261     000F                     	;# 
   262     0010                     	;# 
   263     0011                     	;# 
   264     0012                     	;# 
   265     0013                     	;# 
   266     0014                     	;# 
   267     0015                     	;# 
   268     0015                     	;# 
   269     0016                     	;# 
   270     0017                     	;# 
   271     0018                     	;# 
   272     0019                     	;# 
   273     001A                     	;# 
   274     001B                     	;# 
   275     001B                     	;# 
   276     001C                     	;# 
   277     001D                     	;# 
   278     001E                     	;# 
   279     001F                     	;# 
   280     0081                     	;# 
   281     0085                     	;# 
   282     0086                     	;# 
   283     0087                     	;# 
   284     0088                     	;# 
   285     0089                     	;# 
   286     008C                     	;# 
   287     008D                     	;# 
   288     008E                     	;# 
   289     0091                     	;# 
   290     0092                     	;# 
   291     0093                     	;# 
   292     0094                     	;# 
   293     0098                     	;# 
   294     0099                     	;# 
   295     009C                     	;# 
   296     009D                     	;# 
   297     009E                     	;# 
   298     009F                     	;# 
   299     010C                     	;# 
   300     010D                     	;# 
   301     010E                     	;# 
   302     010F                     	;# 
   303     018C                     	;# 
   304     018D                     	;# 
   305     0019                     _TXREG	set	25
   306     001A                     _RCREG	set	26
   307     0008                     _PORTD	set	8
   308     0064                     _TXIF	set	100
   309     0065                     _RCIF	set	101
   310     00C4                     _CREN	set	196
   311     00C7                     _SPEN	set	199
   312     005F                     _GIE	set	95
   313     005E                     _PEIE	set	94
   314     0049                     _RE1	set	73
   315     004A                     _RE2	set	74
   316     0099                     _SPBRG	set	153
   317     0088                     _TRISD	set	136
   318     04C5                     _TXEN	set	1221
   319     04C2                     _BRGH	set	1218
   320     0449                     _TRISE1	set	1097
   321     044A                     _TRISE2	set	1098
   322                           
   323                           	psect	strings
   324     0003                     __pstrings:
   325     0003                     stringtab:
   326     0003                     __stringtab:
   327                           
   328                           ;	String table - string pointers are 1 byte each
   329     0003  1BFF               	btfsc	btemp+1,7
   330     0004  280D               	ljmp	stringcode
   331     0005  1383               	bcf	3,7
   332     0006  187F               	btfsc	btemp+1,0
   333     0007  1783               	bsf	3,7
   334     0008  0800               	movf	0,w
   335     0009  0A84               	incf	4,f
   336     000A  1903               	skipnz
   337     000B  0AFF               	incf	btemp+1,f
   338     000C  0008               	return
   339     000D                     stringcode:
   340     000D                     stringdir:
   341     000D  3000               	movlw	high stringdir
   342     000E  008A               	movwf	10
   343     000F  0804               	movf	4,w
   344     0010  0A84               	incf	4,f
   345     0011  0782               	addwf	2,f
   346     0012                     __stringbase:
   347     0012  3400               	retlw	0
   348     0013                     __end_of__stringtab:
   349     0013                     STR_1:
   350     0013  3455               	retlw	85	;'U'
   351     0014  3441               	retlw	65	;'A'
   352     0015  3452               	retlw	82	;'R'
   353     0016  3454               	retlw	84	;'T'
   354     0017  3420               	retlw	32	;' '
   355     0018  3443               	retlw	67	;'C'
   356     0019  344C               	retlw	76	;'L'
   357     001A  3443               	retlw	67	;'C'
   358     001B  3444               	retlw	68	;'D'
   359     001C  3420               	retlw	32	;' '
   360     001D  3450               	retlw	80	;'P'
   361     001E  3472               	retlw	114	;'r'
   362     001F  3469               	retlw	105	;'i'
   363     0020  346E               	retlw	110	;'n'
   364     0021  3474               	retlw	116	;'t'
   365     0022  340A               	retlw	10
   366     0023  3400               	retlw	0
   367     0023                     
   368                           	psect	cinit
   369     07E2                     start_initialization:	
   370                           ; #config settings
   371                           
   372     07E2                     __initialization:
   373                           
   374                           ; Clear objects allocated to BANK0
   375     07E2  1383               	bcf	3,7	;select IRP bank0
   376     07E3  304F               	movlw	low __pbssBANK0
   377     07E4  0084               	movwf	4
   378     07E5  3060               	movlw	low (__pbssBANK0+17)
   379     07E6  120A  118A  243F  120A  118A  	fcall	clear_ram0
   380                           
   381                           ; Clear objects allocated to BANK1
   382     07EB  30A0               	movlw	low __pbssBANK1
   383     07EC  0084               	movwf	4
   384     07ED  30B1               	movlw	low (__pbssBANK1+17)
   385     07EE  120A  118A  243F  120A  118A  	fcall	clear_ram0
   386                           
   387                           ; Clear objects allocated to BANK2
   388     07F3  1783               	bsf	3,7	;select IRP bank2
   389     07F4  3010               	movlw	low __pbssBANK2
   390     07F5  0084               	movwf	4
   391     07F6  306A               	movlw	low (__pbssBANK2+90)
   392     07F7  120A  118A  243F  120A  118A  	fcall	clear_ram0
   393     07FC                     end_of_initialization:	
   394                           ;End of C runtime variable initialization code
   395                           
   396     07FC                     __end_of__initialization:
   397     07FC  0183               	clrf	3
   398     07FD  120A  118A  2ECB   	ljmp	_main	;jump to C main() function
   399                           
   400                           	psect	bssBANK0
   401     004F                     __pbssBANK0:
   402     004F                     main@F961:
   403     004F                     	ds	17
   404                           
   405                           	psect	bssBANK1
   406     00A0                     __pbssBANK1:
   407     00A0                     main@F963:
   408     00A0                     	ds	17
   409                           
   410                           	psect	bssBANK2
   411     0110                     __pbssBANK2:
   412     0110                     main@F959:
   413     0110                     	ds	90
   414                           
   415                           	psect	clrtext
   416     043F                     clear_ram0:	
   417                           ;	Called with FSR containing the base address, and
   418                           ;	W with the last address+1
   419                           
   420     043F  0064               	clrwdt	;clear the watchdog before getting into this loop
   421     0440                     clrloop0:
   422     0440  0180               	clrf	0	;clear RAM location pointed to by FSR
   423     0441  0A84               	incf	4,f	;increment pointer
   424     0442  0604               	xorwf	4,w	;XOR with final address
   425     0443  1903               	btfsc	3,2	;have we reached the end yet?
   426     0444  3400               	retlw	0	;all done for this memory range, return
   427     0445  0604               	xorwf	4,w	;XOR again to restore value
   428     0446  2C40               	goto	clrloop0	;do the next byte
   429                           
   430                           	psect	cstackBANK3
   431     0190                     __pcstackBANK3:
   432     0190                     main@str:
   433                           
   434                           ; 90 bytes @ 0x0
   435     0190                     	ds	90
   436                           
   437                           	psect	cstackCOMMON
   438     0070                     __pcstackCOMMON:
   439     0070                     ?_gets:
   440     0070                     ??_gets:	
   441                           ; 1 bytes @ 0x0
   442                           
   443     0070                     ?_clcd_write:	
   444                           ; 1 bytes @ 0x0
   445                           
   446     0070                     ?_init_display_controller:	
   447                           ; 1 bytes @ 0x0
   448                           
   449     0070                     ?_init_clcd:	
   450                           ; 1 bytes @ 0x0
   451                           
   452     0070                     ?_clcd_write@main$F83:	
   453                           ; 1 bytes @ 0x0
   454                           
   455     0070                     ?_init_config:	
   456                           ; 1 bytes @ 0x0
   457                           
   458     0070                     ?_main:	
   459                           ; 1 bytes @ 0x0
   460                           
   461     0070                     ?_getchar:	
   462                           ; 1 bytes @ 0x0
   463                           
   464     0070                     ??_getchar:	
   465                           ; 1 bytes @ 0x0
   466                           
   467     0070                     ?_putchar:	
   468                           ; 1 bytes @ 0x0
   469                           
   470     0070                     ??_putchar:	
   471                           ; 1 bytes @ 0x0
   472                           
   473     0070                     ?_strlen:	
   474                           ; 1 bytes @ 0x0
   475                           
   476     0070                     ?___lldiv:	
   477                           ; 2 bytes @ 0x0
   478                           
   479     0070                     clcd_write@mode:	
   480                           ; 4 bytes @ 0x0
   481                           
   482     0070                     clcd_write@main$F83@mode:	
   483                           ; 1 bytes @ 0x0
   484                           
   485     0070                     putchar@data:	
   486                           ; 1 bytes @ 0x0
   487                           
   488     0070                     strlen@s:	
   489                           ; 1 bytes @ 0x0
   490                           
   491     0070                     ___lldiv@divisor:	
   492                           ; 2 bytes @ 0x0
   493                           
   494                           
   495                           ; 4 bytes @ 0x0
   496     0070                     	ds	1
   497     0071                     ?_puts:
   498     0071                     ??_clcd_write:	
   499                           ; 1 bytes @ 0x1
   500                           
   501     0071                     ??_clcd_write@main$F83:	
   502                           ; 1 bytes @ 0x1
   503                           
   504     0071                     gets@J:	
   505                           ; 1 bytes @ 0x1
   506                           
   507     0071                     puts@s:	
   508                           ; 1 bytes @ 0x1
   509                           
   510                           
   511                           ; 2 bytes @ 0x1
   512     0071                     	ds	1
   513     0072                     ??_strlen:
   514     0072                     gets@string:	
   515                           ; 1 bytes @ 0x2
   516                           
   517     0072                     strlen@cp:	
   518                           ; 1 bytes @ 0x2
   519                           
   520                           
   521                           ; 2 bytes @ 0x2
   522     0072                     	ds	1
   523     0073                     ??_puts:
   524     0073                     clcd_write@byte:	
   525                           ; 1 bytes @ 0x3
   526                           
   527     0073                     clcd_write@main$F83@byte:	
   528                           ; 1 bytes @ 0x3
   529                           
   530     0073                     gets@i:	
   531                           ; 1 bytes @ 0x3
   532                           
   533                           
   534                           ; 1 bytes @ 0x3
   535     0073                     	ds	1
   536     0074                     ??_init_display_controller:
   537     0074                     ?_clcd_print:	
   538                           ; 1 bytes @ 0x4
   539                           
   540     0074                     ?_strncpy:	
   541                           ; 1 bytes @ 0x4
   542                           
   543     0074                     clcd_print@addr:	
   544                           ; 2 bytes @ 0x4
   545                           
   546     0074                     strncpy@to:	
   547                           ; 1 bytes @ 0x4
   548                           
   549     0074                     ___lldiv@dividend:	
   550                           ; 2 bytes @ 0x4
   551                           
   552                           
   553                           ; 4 bytes @ 0x4
   554     0074                     	ds	1
   555     0075                     ??_clcd_print:
   556                           
   557                           ; 1 bytes @ 0x5
   558     0075                     	ds	1
   559     0076                     ??_init_clcd:
   560     0076                     clcd_print@str:	
   561                           ; 1 bytes @ 0x6
   562                           
   563     0076                     strncpy@from:	
   564                           ; 1 bytes @ 0x6
   565                           
   566                           
   567                           ; 1 bytes @ 0x6
   568     0076                     	ds	1
   569     0077                     strncpy@size:
   570                           
   571                           ; 2 bytes @ 0x7
   572     0077                     	ds	1
   573     0078                     ??___lldiv:
   574                           
   575                           ; 1 bytes @ 0x8
   576     0078                     	ds	1
   577     0079                     ??_strncpy:
   578     0079                     ___lldiv@quotient:	
   579                           ; 1 bytes @ 0x9
   580                           
   581                           
   582                           ; 4 bytes @ 0x9
   583     0079                     	ds	3
   584     007C                     strncpy@cp:
   585                           
   586                           ; 2 bytes @ 0xC
   587     007C                     	ds	1
   588     007D                     ___lldiv@counter:
   589                           
   590                           ; 1 bytes @ 0xD
   591     007D                     	ds	1
   592     007E                     ??_init_config:
   593                           
   594                           	psect	cstackBANK0
   595     0020                     __pcstackBANK0:	
   596                           ; 1 bytes @ 0xE
   597                           
   598     0020                     ?_init_uart:
   599     0020                     init_uart@baud:	
   600                           ; 1 bytes @ 0x0
   601                           
   602                           
   603                           ; 4 bytes @ 0x0
   604     0020                     	ds	4
   605     0024                     ??_init_uart:
   606                           
   607                           ; 1 bytes @ 0x4
   608     0024                     	ds	4
   609     0028                     ??_main:
   610                           
   611                           ; 1 bytes @ 0x8
   612     0028                     	ds	1
   613     0029                     main@str2:
   614                           
   615                           ; 17 bytes @ 0x9
   616     0029                     	ds	17
   617     003A                     main@str1:
   618                           
   619                           ; 17 bytes @ 0x1A
   620     003A                     	ds	17
   621     004B                     main@count:
   622                           
   623                           ; 2 bytes @ 0x2B
   624     004B                     	ds	2
   625     004D                     main@i:
   626                           
   627                           ; 2 bytes @ 0x2D
   628     004D                     	ds	2
   629                           
   630                           	psect	maintext
   631     06CB                     __pmaintext:	
   632 ;;
   633 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   634 ;;
   635 ;; *************** function _main *****************
   636 ;; Defined at:
   637 ;;		line 59 in file "main.c"
   638 ;; Parameters:    Size  Location     Type
   639 ;;		None
   640 ;; Auto vars:     Size  Location     Type
   641 ;;  str            90    0[BANK3 ] unsigned char [90]
   642 ;;  str1           17   26[BANK0 ] unsigned char [17]
   643 ;;  str2           17    9[BANK0 ] unsigned char [17]
   644 ;;  wait            4    0        unsigned long 
   645 ;;  i               2   45[BANK0 ] unsigned int 
   646 ;;  count           2   43[BANK0 ] unsigned int 
   647 ;;  ch              1    0        unsigned char 
   648 ;; Return value:  Size  Location     Type
   649 ;;                  1    wreg      void 
   650 ;; Registers used:
   651 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   652 ;; Tracked objects:
   653 ;;		On entry : B00/0
   654 ;;		On exit  : 0/0
   655 ;;		Unchanged: 0/0
   656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   657 ;;      Params:         0       0       0       0       0
   658 ;;      Locals:         0      38       0      90       0
   659 ;;      Temps:          0       1       0       0       0
   660 ;;      Totals:         0      39       0      90       0
   661 ;;Total ram usage:      129 bytes
   662 ;; Hardware stack levels required when called: 4
   663 ;; This function calls:
   664 ;;		_clcd_print
   665 ;;		_clcd_write@main$F83
   666 ;;		_gets
   667 ;;		_init_config
   668 ;;		_puts
   669 ;;		_strlen
   670 ;;		_strncpy
   671 ;; This function is called by:
   672 ;;		Startup code after reset
   673 ;; This function uses a non-reentrant model
   674 ;;
   675                           
   676     06CB                     _main:	
   677                           ;psect for function _main
   678                           
   679     06CB                     l1149:	
   680                           ;incstack = 0
   681                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   682                           
   683     06CB                     l1151:
   684                           
   685                           ;main.c: 61:                 str1[count-1] =str[i];
   686     06CB  3090               	movlw	main@str& (0+255)
   687     06CC  0084               	movwf	4
   688     06CD  305A               	movlw	90
   689     06CE  00FF               	movwf	btemp+1
   690     06CF                     u550:
   691     06CF  1783               	bsf	3,7	;select IRP bank3
   692     06D0  0180               	clrf	0
   693     06D1  0A84               	incf	4,f
   694     06D2  0BFF               	decfsz	btemp+1,f
   695     06D3  2ECF               	goto	u550
   696     06D4                     l1153:
   697     06D4  303A               	movlw	main@str1& (0+255)
   698     06D5  0084               	movwf	4
   699     06D6  3011               	movlw	17
   700     06D7  00FF               	movwf	btemp+1
   701     06D8                     u560:
   702     06D8  1383               	bcf	3,7	;select IRP bank0
   703     06D9  0180               	clrf	0
   704     06DA  0A84               	incf	4,f
   705     06DB  0BFF               	decfsz	btemp+1,f
   706     06DC  2ED8               	goto	u560
   707     06DD                     l1155:
   708     06DD  3029               	movlw	main@str2& (0+255)
   709     06DE  0084               	movwf	4
   710     06DF  3011               	movlw	17
   711     06E0  00FF               	movwf	btemp+1
   712     06E1                     u570:
   713     06E1  0180               	clrf	0
   714     06E2  0A84               	incf	4,f
   715     06E3  0BFF               	decfsz	btemp+1,f
   716     06E4  2EE1               	goto	u570
   717     06E5                     l1157:
   718     06E5                     l1159:
   719     06E5  1283               	bcf	3,5	;RP0=0, select bank0
   720     06E6  1303               	bcf	3,6	;RP1=0, select bank0
   721     06E7  01CB               	clrf	main@count
   722     06E8  01CC               	clrf	main@count+1
   723     06E9                     l1161:
   724                           
   725                           ;main.c: 63:         }
   726     06E9  120A  118A  24A4  120A  118A  	fcall	_init_config
   727     06EE                     l1163:
   728                           
   729                           ;main.c: 66:         strncpy(str,"",strlen(str));;main.c: 67:         clcd_write(0x01, 0
      +                          );
   730     06EE  3090               	movlw	(low (main@str| (0+256)))& (0+255)
   731     06EF  120A  118A  24EA  120A  118A  	fcall	_gets
   732     06F4                     l1165:
   733                           
   734                           ;main.c: 68: 
   735     06F4  3090               	movlw	(low (main@str| (0+256)))& (0+255)
   736     06F5  00F1               	movwf	puts@s
   737     06F6  3001               	movlw	1
   738     06F7  00F2               	movwf	puts@s+1
   739     06F8  120A  118A  24C4  120A  118A  	fcall	_puts
   740     06FD                     l1167:
   741                           
   742                           ;main.c: 69:         clcd_print(str1,(0x80 + 0));
   743     06FD  1283               	bcf	3,5	;RP0=0, select bank0
   744     06FE  1303               	bcf	3,6	;RP1=0, select bank0
   745     06FF  01CD               	clrf	main@i
   746     0700  01CE               	clrf	main@i+1
   747     0701  2F98               	goto	l1199
   748     0702                     l1169:
   749                           
   750                           ;main.c: 70:         clcd_print(str2,(0xC0 + 0));;main.c: 71:     }
   751     0702  3001               	movlw	1
   752     0703  07CB               	addwf	main@count,f
   753     0704  1803               	skipnc
   754     0705  0ACC               	incf	main@count+1,f
   755     0706  3000               	movlw	0
   756     0707  07CC               	addwf	main@count+1,f
   757                           
   758                           ;main.c: 72: 
   759     0708  3000               	movlw	0
   760     0709  024C               	subwf	main@count+1,w
   761     070A  3021               	movlw	33
   762     070B  1903               	skipnz
   763     070C  024B               	subwf	main@count,w
   764     070D  1C03               	skipc
   765     070E  2F10               	goto	u581
   766     070F  2F11               	goto	u580
   767     0710                     u581:
   768     0710  2F63               	goto	l1189
   769     0711                     u580:
   770     0711                     l1171:
   771                           
   772                           ;main.c: 73:     return;;main.c: 74: }
   773     0711  3011               	movlw	17
   774     0712  00CB               	movwf	main@count
   775     0713  3000               	movlw	0
   776     0714  00CC               	movwf	main@count+1
   777     0715                     l1173:
   778     0715  303A               	movlw	(low (main@str1| 0))& (0+255)
   779     0716  00F4               	movwf	strncpy@to
   780     0717  3000               	movlw	0
   781     0718  00F5               	movwf	strncpy@to+1
   782     0719  3011               	movlw	(low (((STR_1+16)-__stringbase)| (0+32768)))& (0+255)
   783     071A  00F6               	movwf	strncpy@from
   784     071B  303A               	movlw	(low (main@str1| 0))& (0+255)
   785     071C  00F0               	movwf	strlen@s
   786     071D  3000               	movlw	0
   787     071E  00F1               	movwf	strlen@s+1
   788     071F  120A  118A  2466  120A  118A  	fcall	_strlen
   789     0724  0871               	movf	?_strlen+1,w
   790     0725  00F8               	movwf	strncpy@size+1
   791     0726  0870               	movf	?_strlen,w
   792     0727  00F7               	movwf	strncpy@size
   793     0728  120A  118A  25B6  120A  118A  	fcall	_strncpy
   794     072D                     l1175:
   795     072D  1283               	bcf	3,5	;RP0=0, select bank0
   796     072E  1303               	bcf	3,6	;RP1=0, select bank0
   797     072F  01CD               	clrf	main@i
   798     0730  01CE               	clrf	main@i+1
   799     0731                     l1181:
   800     0731  084D               	movf	main@i,w
   801     0732  3E29               	addlw	(low (main@str2| 0))& (0+255)
   802     0733  0084               	movwf	4
   803     0734  1383               	bcf	3,7	;select IRP bank0
   804     0735  0800               	movf	0,w
   805     0736  00A8               	movwf	??_main
   806     0737  084D               	movf	main@i,w
   807     0738  3E3A               	addlw	(low (main@str1| 0))& (0+255)
   808     0739  0084               	movwf	4
   809     073A  0828               	movf	??_main,w
   810     073B  0080               	movwf	0
   811     073C                     l1183:
   812     073C  3001               	movlw	1
   813     073D  07CD               	addwf	main@i,f
   814     073E  1803               	skipnc
   815     073F  0ACE               	incf	main@i+1,f
   816     0740  3000               	movlw	0
   817     0741  07CE               	addwf	main@i+1,f
   818     0742                     l1185:
   819     0742  3000               	movlw	0
   820     0743  024E               	subwf	main@i+1,w
   821     0744  3010               	movlw	16
   822     0745  1903               	skipnz
   823     0746  024D               	subwf	main@i,w
   824     0747  1C03               	skipc
   825     0748  2F4A               	goto	u591
   826     0749  2F4B               	goto	u590
   827     074A                     u591:
   828     074A  2F31               	goto	l1181
   829     074B                     u590:
   830     074B                     l1187:
   831     074B  3029               	movlw	(low (main@str2| 0))& (0+255)
   832     074C  00F4               	movwf	strncpy@to
   833     074D  3000               	movlw	0
   834     074E  00F5               	movwf	strncpy@to+1
   835     074F  3011               	movlw	(low (((STR_1+16)-__stringbase)| (0+32768)))& (0+255)
   836     0750  00F6               	movwf	strncpy@from
   837     0751  3029               	movlw	(low (main@str2| 0))& (0+255)
   838     0752  00F0               	movwf	strlen@s
   839     0753  3000               	movlw	0
   840     0754  00F1               	movwf	strlen@s+1
   841     0755  120A  118A  2466  120A  118A  	fcall	_strlen
   842     075A  0871               	movf	?_strlen+1,w
   843     075B  00F8               	movwf	strncpy@size+1
   844     075C  0870               	movf	?_strlen,w
   845     075D  00F7               	movwf	strncpy@size
   846     075E  120A  118A  25B6  120A  118A  	fcall	_strncpy
   847     0763                     l1189:
   848     0763  3000               	movlw	0
   849     0764  1283               	bcf	3,5	;RP0=0, select bank0
   850     0765  1303               	bcf	3,6	;RP1=0, select bank0
   851     0766  024C               	subwf	main@count+1,w
   852     0767  3011               	movlw	17
   853     0768  1903               	skipnz
   854     0769  024B               	subwf	main@count,w
   855     076A  1C03               	skipc
   856     076B  2F6D               	goto	u601
   857     076C  2F6E               	goto	u600
   858     076D                     u601:
   859     076D  2F7C               	goto	l1193
   860     076E                     u600:
   861     076E                     l1191:
   862     076E  084D               	movf	main@i,w
   863     076F  3E90               	addlw	(low (main@str| (0+256)))& (0+255)
   864     0770  0084               	movwf	4
   865     0771  1783               	bsf	3,7	;select IRP bank3
   866     0772  0800               	movf	0,w
   867     0773  00A8               	movwf	??_main
   868     0774  084B               	movf	main@count,w
   869     0775  3EEF               	addlw	239
   870     0776  3E29               	addlw	(low (main@str2| 0))& (0+255)
   871     0777  0084               	movwf	4
   872     0778  0828               	movf	??_main,w
   873     0779  1383               	bcf	3,7	;select IRP bank0
   874     077A  0080               	movwf	0
   875     077B  2F92               	goto	l1197
   876     077C                     l1193:
   877     077C  3000               	movlw	0
   878     077D  024C               	subwf	main@count+1,w
   879     077E  3011               	movlw	17
   880     077F  1903               	skipnz
   881     0780  024B               	subwf	main@count,w
   882     0781  1803               	skipnc
   883     0782  2F84               	goto	u611
   884     0783  2F85               	goto	u610
   885     0784                     u611:
   886     0784  2F92               	goto	l1197
   887     0785                     u610:
   888     0785                     l1195:
   889     0785  084D               	movf	main@i,w
   890     0786  3E90               	addlw	(low (main@str| (0+256)))& (0+255)
   891     0787  0084               	movwf	4
   892     0788  1783               	bsf	3,7	;select IRP bank3
   893     0789  0800               	movf	0,w
   894     078A  00A8               	movwf	??_main
   895     078B  084B               	movf	main@count,w
   896     078C  3EFF               	addlw	255
   897     078D  3E3A               	addlw	(low (main@str1| 0))& (0+255)
   898     078E  0084               	movwf	4
   899     078F  0828               	movf	??_main,w
   900     0790  1383               	bcf	3,7	;select IRP bank0
   901     0791  0080               	movwf	0
   902     0792                     l1197:
   903     0792  3001               	movlw	1
   904     0793  07CD               	addwf	main@i,f
   905     0794  1803               	skipnc
   906     0795  0ACE               	incf	main@i+1,f
   907     0796  3000               	movlw	0
   908     0797  07CE               	addwf	main@i+1,f
   909     0798                     l1199:
   910     0798  3090               	movlw	(low (main@str| (0+256)))& (0+255)
   911     0799  00F0               	movwf	strlen@s
   912     079A  3001               	movlw	1
   913     079B  00F1               	movwf	strlen@s+1
   914     079C  120A  118A  2466  120A  118A  	fcall	_strlen
   915     07A1  0871               	movf	?_strlen+1,w
   916     07A2  1283               	bcf	3,5	;RP0=0, select bank0
   917     07A3  1303               	bcf	3,6	;RP1=0, select bank0
   918     07A4  024E               	subwf	main@i+1,w
   919     07A5  1D03               	skipz
   920     07A6  2FA9               	goto	u625
   921     07A7  0870               	movf	?_strlen,w
   922     07A8  024D               	subwf	main@i,w
   923     07A9                     u625:
   924     07A9  1C03               	skipc
   925     07AA  2FAC               	goto	u621
   926     07AB  2FAD               	goto	u620
   927     07AC                     u621:
   928     07AC  2F02               	goto	l1169
   929     07AD                     u620:
   930     07AD                     l1201:
   931     07AD  01CA               	clrf	main@str1+16
   932     07AE  01B9               	clrf	main@str2+16
   933     07AF                     l1203:
   934     07AF  3090               	movlw	(low (main@str| (0+256)))& (0+255)
   935     07B0  00F4               	movwf	strncpy@to
   936     07B1  3001               	movlw	1
   937     07B2  00F5               	movwf	strncpy@to+1
   938     07B3  3011               	movlw	(low (((STR_1+16)-__stringbase)| (0+32768)))& (0+255)
   939     07B4  00F6               	movwf	strncpy@from
   940     07B5  3090               	movlw	(low (main@str| (0+256)))& (0+255)
   941     07B6  00F0               	movwf	strlen@s
   942     07B7  3001               	movlw	1
   943     07B8  00F1               	movwf	strlen@s+1
   944     07B9  120A  118A  2466  120A  118A  	fcall	_strlen
   945     07BE  0871               	movf	?_strlen+1,w
   946     07BF  00F8               	movwf	strncpy@size+1
   947     07C0  0870               	movf	?_strlen,w
   948     07C1  00F7               	movwf	strncpy@size
   949     07C2  120A  118A  25B6  120A  118A  	fcall	_strncpy
   950     07C7                     l1205:
   951     07C7  01F0               	clrf	clcd_write@main$F83@mode
   952     07C8  3001               	movlw	1
   953     07C9  120A  118A  254A  120A  118A  	fcall	_clcd_write@main$F83
   954     07CE                     l1207:
   955     07CE  3080               	movlw	128
   956     07CF  00F4               	movwf	clcd_print@addr
   957     07D0  303A               	movlw	(low (main@str1| 0))& (0+255)
   958     07D1  120A  118A  2484  120A  118A  	fcall	_clcd_print
   959     07D6                     l1209:
   960     07D6  30C0               	movlw	192
   961     07D7  00F4               	movwf	clcd_print@addr
   962     07D8  3029               	movlw	(low (main@str2| 0))& (0+255)
   963     07D9  120A  118A  2484  120A  118A  	fcall	_clcd_print
   964     07DE  2EEE               	goto	l1163
   965     07DF  120A  118A  2800   	ljmp	start
   966     07E2                     __end_of_main:
   967                           
   968                           	psect	text1
   969     05B6                     __ptext1:	
   970 ;; *************** function _strncpy *****************
   971 ;; Defined at:
   972 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\strncpy.c"
   973 ;; Parameters:    Size  Location     Type
   974 ;;  to              2    4[COMMON] PTR unsigned char 
   975 ;;		 -> main@str2(17), main@str1(17), main@str(90), 
   976 ;;  from            1    6[COMMON] PTR const unsigned char 
   977 ;;		 -> STR_4(1), STR_3(1), STR_2(1), 
   978 ;;  size            2    7[COMMON] unsigned int 
   979 ;; Auto vars:     Size  Location     Type
   980 ;;  cp              2   12[COMMON] PTR unsigned char 
   981 ;;		 -> main@str2(17), main@str1(17), main@str(90), 
   982 ;; Return value:  Size  Location     Type
   983 ;;                  2    4[COMMON] PTR unsigned char 
   984 ;; Registers used:
   985 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   986 ;; Tracked objects:
   987 ;;		On entry : 0/0
   988 ;;		On exit  : 0/0
   989 ;;		Unchanged: 0/0
   990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   991 ;;      Params:         5       0       0       0       0
   992 ;;      Locals:         2       0       0       0       0
   993 ;;      Temps:          3       0       0       0       0
   994 ;;      Totals:        10       0       0       0       0
   995 ;;Total ram usage:       10 bytes
   996 ;; Hardware stack levels used: 2
   997 ;; This function calls:
   998 ;;		Nothing
   999 ;; This function is called by:
  1000 ;;		_main
  1001 ;; This function uses a non-reentrant model
  1002 ;;
  1003                           
  1004     05B6                     _strncpy:	
  1005                           ;psect for function _strncpy
  1006                           
  1007     05B6                     l1131:	
  1008                           ;incstack = 0
  1009                           ; Regs used in _strncpy: [wreg-fsr0h+status,2+status,0+pclath]
  1010                           
  1011     05B6  0874               	movf	strncpy@to,w
  1012     05B7  00FC               	movwf	strncpy@cp
  1013     05B8  0875               	movf	strncpy@to+1,w
  1014     05B9  00FD               	movwf	strncpy@cp+1
  1015     05BA  2DE0               	goto	l1139
  1016     05BB                     l1133:
  1017     05BB  3001               	movlw	1
  1018     05BC  02F7               	subwf	strncpy@size,f
  1019     05BD  3000               	movlw	0
  1020     05BE  1C03               	skipc
  1021     05BF  03F8               	decf	strncpy@size+1,f
  1022     05C0  02F8               	subwf	strncpy@size+1,f
  1023     05C1                     l1135:
  1024     05C1  3001               	movlw	1
  1025     05C2  07F6               	addwf	strncpy@from,f
  1026     05C3  30FF               	movlw	-1
  1027     05C4  0776               	addwf	strncpy@from,w
  1028     05C5  0084               	movwf	4
  1029     05C6  120A  118A  200D  120A  118A  	fcall	stringdir
  1030     05CB  00F9               	movwf	??_strncpy
  1031     05CC  087D               	movf	strncpy@cp+1,w
  1032     05CD  00FB               	movwf	??_strncpy+2
  1033     05CE  087C               	movf	strncpy@cp,w
  1034     05CF  00FA               	movwf	??_strncpy+1
  1035     05D0  0AFC               	incf	strncpy@cp,f
  1036     05D1  1903               	skipnz
  1037     05D2  0AFD               	incf	strncpy@cp+1,f
  1038     05D3  087A               	movf	??_strncpy+1,w
  1039     05D4  0084               	movwf	4
  1040     05D5  1783               	bsf	3,7
  1041     05D6  1C7B               	btfss	??_strncpy+2,0
  1042     05D7  1383               	bcf	3,7
  1043     05D8  0879               	movf	??_strncpy,w
  1044     05D9  0080               	movwf	0
  1045     05DA  0800               	movf	0,w
  1046     05DB  1D03               	btfss	3,2
  1047     05DC  2DDE               	goto	u521
  1048     05DD  2DDF               	goto	u520
  1049     05DE                     u521:
  1050     05DE  2DE0               	goto	l1139
  1051     05DF                     u520:
  1052     05DF  2DF3               	goto	l1145
  1053     05E0                     l1139:
  1054     05E0  0877               	movf	strncpy@size,w
  1055     05E1  0478               	iorwf	strncpy@size+1,w
  1056     05E2  1D03               	btfss	3,2
  1057     05E3  2DE5               	goto	u531
  1058     05E4  2DE6               	goto	u530
  1059     05E5                     u531:
  1060     05E5  2DBB               	goto	l1133
  1061     05E6                     u530:
  1062     05E6  2DF3               	goto	l1145
  1063     05E7                     l1141:
  1064     05E7  087C               	movf	strncpy@cp,w
  1065     05E8  0084               	movwf	4
  1066     05E9  1783               	bsf	3,7
  1067     05EA  1C7D               	btfss	strncpy@cp+1,0
  1068     05EB  1383               	bcf	3,7
  1069     05EC  0180               	clrf	0
  1070     05ED                     l1143:
  1071     05ED  3001               	movlw	1
  1072     05EE  07FC               	addwf	strncpy@cp,f
  1073     05EF  1803               	skipnc
  1074     05F0  0AFD               	incf	strncpy@cp+1,f
  1075     05F1  3000               	movlw	0
  1076     05F2  07FD               	addwf	strncpy@cp+1,f
  1077     05F3                     l1145:
  1078     05F3  3001               	movlw	1
  1079     05F4  02F7               	subwf	strncpy@size,f
  1080     05F5  3000               	movlw	0
  1081     05F6  1C03               	skipc
  1082     05F7  03F8               	decf	strncpy@size+1,f
  1083     05F8  02F8               	subwf	strncpy@size+1,f
  1084     05F9  0A77               	incf	strncpy@size,w
  1085     05FA  1D03               	skipz
  1086     05FB  2E00               	goto	u541
  1087     05FC  0A78               	incf	strncpy@size+1,w
  1088     05FD  1D03               	btfss	3,2
  1089     05FE  2E00               	goto	u541
  1090     05FF  2E01               	goto	u540
  1091     0600                     u541:
  1092     0600  2DE7               	goto	l1141
  1093     0601                     u540:
  1094     0601                     l681:
  1095     0601  0008               	return
  1096     0602                     __end_of_strncpy:
  1097                           
  1098                           	psect	text2
  1099     0466                     __ptext2:	
  1100 ;; *************** function _strlen *****************
  1101 ;; Defined at:
  1102 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\strlen.c"
  1103 ;; Parameters:    Size  Location     Type
  1104 ;;  s               2    0[COMMON] PTR const unsigned char 
  1105 ;;		 -> main@str2(17), main@str1(17), main@str(90), 
  1106 ;; Auto vars:     Size  Location     Type
  1107 ;;  cp              2    2[COMMON] PTR const unsigned char 
  1108 ;;		 -> main@str2(17), main@str1(17), main@str(90), 
  1109 ;; Return value:  Size  Location     Type
  1110 ;;                  2    0[COMMON] unsigned int 
  1111 ;; Registers used:
  1112 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1113 ;; Tracked objects:
  1114 ;;		On entry : 0/0
  1115 ;;		On exit  : 0/0
  1116 ;;		Unchanged: 0/0
  1117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1118 ;;      Params:         2       0       0       0       0
  1119 ;;      Locals:         2       0       0       0       0
  1120 ;;      Temps:          0       0       0       0       0
  1121 ;;      Totals:         4       0       0       0       0
  1122 ;;Total ram usage:        4 bytes
  1123 ;; Hardware stack levels used: 1
  1124 ;; This function calls:
  1125 ;;		Nothing
  1126 ;; This function is called by:
  1127 ;;		_main
  1128 ;; This function uses a non-reentrant model
  1129 ;;
  1130                           
  1131     0466                     _strlen:	
  1132                           ;psect for function _strlen
  1133                           
  1134     0466                     l1121:	
  1135                           ;incstack = 0
  1136                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  1137                           
  1138     0466  0870               	movf	strlen@s,w
  1139     0467  00F2               	movwf	strlen@cp
  1140     0468  0871               	movf	strlen@s+1,w
  1141     0469  00F3               	movwf	strlen@cp+1
  1142     046A  2C71               	goto	l1125
  1143     046B                     l1123:
  1144     046B  3001               	movlw	1
  1145     046C  07F2               	addwf	strlen@cp,f
  1146     046D  1803               	skipnc
  1147     046E  0AF3               	incf	strlen@cp+1,f
  1148     046F  3000               	movlw	0
  1149     0470  07F3               	addwf	strlen@cp+1,f
  1150     0471                     l1125:
  1151     0471  0872               	movf	strlen@cp,w
  1152     0472  0084               	movwf	4
  1153     0473  1783               	bsf	3,7
  1154     0474  1C73               	btfss	strlen@cp+1,0
  1155     0475  1383               	bcf	3,7
  1156     0476  0800               	movf	0,w
  1157     0477  1D03               	btfss	3,2
  1158     0478  2C7A               	goto	u511
  1159     0479  2C7B               	goto	u510
  1160     047A                     u511:
  1161     047A  2C6B               	goto	l1123
  1162     047B                     u510:
  1163     047B                     l1127:
  1164     047B  0870               	movf	strlen@s,w
  1165     047C  0272               	subwf	strlen@cp,w
  1166     047D  00F0               	movwf	?_strlen
  1167     047E  0871               	movf	strlen@s+1,w
  1168     047F  1C03               	skipc
  1169     0480  0A71               	incf	strlen@s+1,w
  1170     0481  0273               	subwf	strlen@cp+1,w
  1171     0482  00F1               	movwf	?_strlen+1
  1172     0483                     l671:
  1173     0483  0008               	return
  1174     0484                     __end_of_strlen:
  1175                           
  1176                           	psect	text3
  1177     04A4                     __ptext3:	
  1178 ;; *************** function _init_config *****************
  1179 ;; Defined at:
  1180 ;;		line 45 in file "main.c"
  1181 ;; Parameters:    Size  Location     Type
  1182 ;;		None
  1183 ;; Auto vars:     Size  Location     Type
  1184 ;;		None
  1185 ;; Return value:  Size  Location     Type
  1186 ;;                  1    wreg      void 
  1187 ;; Registers used:
  1188 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1189 ;; Tracked objects:
  1190 ;;		On entry : 0/0
  1191 ;;		On exit  : 0/0
  1192 ;;		Unchanged: 0/0
  1193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1194 ;;      Params:         0       0       0       0       0
  1195 ;;      Locals:         0       0       0       0       0
  1196 ;;      Temps:          0       0       0       0       0
  1197 ;;      Totals:         0       0       0       0       0
  1198 ;;Total ram usage:        0 bytes
  1199 ;; Hardware stack levels used: 1
  1200 ;; Hardware stack levels required when called: 3
  1201 ;; This function calls:
  1202 ;;		_init_clcd
  1203 ;;		_init_uart
  1204 ;;		_puts
  1205 ;; This function is called by:
  1206 ;;		_main
  1207 ;; This function uses a non-reentrant model
  1208 ;;
  1209                           
  1210     04A4                     _init_config:	
  1211                           ;psect for function _init_config
  1212                           
  1213     04A4                     l1099:	
  1214                           ;incstack = 0
  1215                           ; Regs used in _init_config: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1216                           
  1217                           
  1218                           ;main.c: 47:                strncpy(str1,"",strlen(str1));
  1219     04A4  120A  118A  2450  120A  118A  	fcall	_init_clcd
  1220                           
  1221                           ;main.c: 48:                 for(i = 0; i < 16; i++)
  1222     04A9  3000               	movlw	0
  1223     04AA  1283               	bcf	3,5	;RP0=0, select bank0
  1224     04AB  1303               	bcf	3,6	;RP1=0, select bank0
  1225     04AC  00A3               	movwf	init_uart@baud+3
  1226     04AD  3000               	movlw	0
  1227     04AE  00A2               	movwf	init_uart@baud+2
  1228     04AF  3025               	movlw	37
  1229     04B0  00A1               	movwf	init_uart@baud+1
  1230     04B1  3080               	movlw	128
  1231     04B2  00A0               	movwf	init_uart@baud
  1232     04B3  120A  118A  2580  120A  118A  	fcall	_init_uart
  1233     04B8                     l1101:
  1234                           
  1235                           ;main.c: 50:                     str1[i] = str2[i];
  1236     04B8  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1237     04B9  00F1               	movwf	puts@s
  1238     04BA  3080               	movlw	128
  1239     04BB  00F2               	movwf	puts@s+1
  1240     04BC  120A  118A  24C4  120A  118A  	fcall	_puts
  1241     04C1                     l1103:
  1242                           
  1243                           ;main.c: 53: 
  1244     04C1  170B               	bsf	11,6	;volatile
  1245     04C2                     l1105:
  1246                           
  1247                           ;main.c: 56:             {
  1248     04C2  178B               	bsf	11,7	;volatile
  1249     04C3                     l64:
  1250     04C3  0008               	return
  1251     04C4                     __end_of_init_config:
  1252                           
  1253                           	psect	text4
  1254     04C4                     __ptext4:	
  1255 ;; *************** function _puts *****************
  1256 ;; Defined at:
  1257 ;;		line 52 in file "uart.c"
  1258 ;; Parameters:    Size  Location     Type
  1259 ;;  s               2    1[COMMON] PTR const unsigned char 
  1260 ;;		 -> main@str(90), STR_1(17), 
  1261 ;; Auto vars:     Size  Location     Type
  1262 ;;		None
  1263 ;; Return value:  Size  Location     Type
  1264 ;;                  1    wreg      void 
  1265 ;; Registers used:
  1266 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1267 ;; Tracked objects:
  1268 ;;		On entry : 0/0
  1269 ;;		On exit  : 0/0
  1270 ;;		Unchanged: 0/0
  1271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1272 ;;      Params:         2       0       0       0       0
  1273 ;;      Locals:         0       0       0       0       0
  1274 ;;      Temps:          0       0       0       0       0
  1275 ;;      Totals:         2       0       0       0       0
  1276 ;;Total ram usage:        2 bytes
  1277 ;; Hardware stack levels used: 1
  1278 ;; Hardware stack levels required when called: 1
  1279 ;; This function calls:
  1280 ;;		_putchar
  1281 ;; This function is called by:
  1282 ;;		_init_config
  1283 ;;		_main
  1284 ;; This function uses a non-reentrant model
  1285 ;;
  1286                           
  1287     04C4                     _puts:	
  1288                           ;psect for function _puts
  1289                           
  1290     04C4                     l1057:	
  1291                           ;incstack = 0
  1292                           ; Regs used in _puts: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1293                           
  1294                           
  1295                           ;uart.c: 52: void puts(const char *s);uart.c: 53: {;uart.c: 54:     while (*s)
  1296     04C4  2CD9               	goto	l1063
  1297     04C5                     l1059:
  1298                           
  1299                           ;uart.c: 55:     {;uart.c: 56:         putchar(*s++);
  1300     04C5  0872               	movf	puts@s+1,w
  1301     04C6  00FF               	movwf	btemp+1
  1302     04C7  0871               	movf	puts@s,w
  1303     04C8  0084               	movwf	4
  1304     04C9  120A  118A  2003  120A  118A  	fcall	stringtab
  1305     04CE  120A  118A  245B  120A  118A  	fcall	_putchar
  1306     04D3                     l1061:
  1307     04D3  3001               	movlw	1
  1308     04D4  07F1               	addwf	puts@s,f
  1309     04D5  1803               	skipnc
  1310     04D6  0AF2               	incf	puts@s+1,f
  1311     04D7  3000               	movlw	0
  1312     04D8  07F2               	addwf	puts@s+1,f
  1313     04D9                     l1063:
  1314                           
  1315                           ;uart.c: 54:     while (*s)
  1316     04D9  0872               	movf	puts@s+1,w
  1317     04DA  1283               	bcf	3,5	;RP0=0, select bank0
  1318     04DB  1303               	bcf	3,6	;RP1=0, select bank0
  1319     04DC  00FF               	movwf	btemp+1
  1320     04DD  0871               	movf	puts@s,w
  1321     04DE  0084               	movwf	4
  1322     04DF  120A  118A  2003  120A  118A  	fcall	stringtab
  1323     04E4  3A00               	xorlw	0
  1324     04E5  1D03               	skipz
  1325     04E6  2CE8               	goto	u441
  1326     04E7  2CE9               	goto	u440
  1327     04E8                     u441:
  1328     04E8  2CC5               	goto	l1059
  1329     04E9                     u440:
  1330     04E9                     l126:
  1331     04E9  0008               	return
  1332     04EA                     __end_of_puts:
  1333                           
  1334                           	psect	text5
  1335     045B                     __ptext5:	
  1336 ;; *************** function _putchar *****************
  1337 ;; Defined at:
  1338 ;;		line 37 in file "uart.c"
  1339 ;; Parameters:    Size  Location     Type
  1340 ;;  data            1    wreg     unsigned char 
  1341 ;; Auto vars:     Size  Location     Type
  1342 ;;  data            1    0[COMMON] unsigned char 
  1343 ;; Return value:  Size  Location     Type
  1344 ;;                  1    wreg      void 
  1345 ;; Registers used:
  1346 ;;		wreg
  1347 ;; Tracked objects:
  1348 ;;		On entry : 0/0
  1349 ;;		On exit  : 0/0
  1350 ;;		Unchanged: 0/0
  1351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1352 ;;      Params:         0       0       0       0       0
  1353 ;;      Locals:         1       0       0       0       0
  1354 ;;      Temps:          0       0       0       0       0
  1355 ;;      Totals:         1       0       0       0       0
  1356 ;;Total ram usage:        1 bytes
  1357 ;; Hardware stack levels used: 1
  1358 ;; This function calls:
  1359 ;;		Nothing
  1360 ;; This function is called by:
  1361 ;;		_puts
  1362 ;; This function uses a non-reentrant model
  1363 ;;
  1364                           
  1365     045B                     _putchar:	
  1366                           ;psect for function _putchar
  1367                           
  1368                           
  1369                           ;incstack = 0
  1370                           ; Regs used in _putchar: [wreg]
  1371                           ;putchar@data stored from wreg
  1372     045B  00F0               	movwf	putchar@data
  1373     045C                     l1019:
  1374                           
  1375                           ;uart.c: 37: void putchar(unsigned char data);uart.c: 38: {;uart.c: 40:     TXREG = data
      +                          ;
  1376     045C  0870               	movf	putchar@data,w
  1377     045D  1283               	bcf	3,5	;RP0=0, select bank0
  1378     045E  1303               	bcf	3,6	;RP1=0, select bank0
  1379     045F  0099               	movwf	25	;volatile
  1380     0460                     l118:	
  1381                           ;uart.c: 46:     } while (TXIF != 1);
  1382                           
  1383     0460  1E0C               	btfss	12,4	;volatile
  1384     0461  2C63               	goto	u351
  1385     0462  2C64               	goto	u350
  1386     0463                     u351:
  1387     0463  2C60               	goto	l118
  1388     0464                     u350:
  1389     0464                     l119:
  1390                           
  1391                           ;uart.c: 49:     TXIF = 0;
  1392     0464  120C               	bcf	12,4	;volatile
  1393     0465                     l120:
  1394     0465  0008               	return
  1395     0466                     __end_of_putchar:
  1396                           
  1397                           	psect	text6
  1398     0580                     __ptext6:	
  1399 ;; *************** function _init_uart *****************
  1400 ;; Defined at:
  1401 ;;		line 4 in file "uart.c"
  1402 ;; Parameters:    Size  Location     Type
  1403 ;;  baud            4    0[BANK0 ] unsigned long 
  1404 ;; Auto vars:     Size  Location     Type
  1405 ;;		None
  1406 ;; Return value:  Size  Location     Type
  1407 ;;                  1    wreg      void 
  1408 ;; Registers used:
  1409 ;;		wreg, status,2, status,0, pclath, cstack
  1410 ;; Tracked objects:
  1411 ;;		On entry : 0/0
  1412 ;;		On exit  : 0/0
  1413 ;;		Unchanged: 0/0
  1414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1415 ;;      Params:         0       4       0       0       0
  1416 ;;      Locals:         0       0       0       0       0
  1417 ;;      Temps:          0       4       0       0       0
  1418 ;;      Totals:         0       8       0       0       0
  1419 ;;Total ram usage:        8 bytes
  1420 ;; Hardware stack levels used: 1
  1421 ;; Hardware stack levels required when called: 1
  1422 ;; This function calls:
  1423 ;;		___lldiv
  1424 ;; This function is called by:
  1425 ;;		_init_config
  1426 ;; This function uses a non-reentrant model
  1427 ;;
  1428                           
  1429     0580                     _init_uart:	
  1430                           ;psect for function _init_uart
  1431                           
  1432     0580                     l1053:	
  1433                           ;incstack = 0
  1434                           ; Regs used in _init_uart: [wreg+status,2+status,0+pclath+cstack]
  1435                           
  1436                           
  1437                           ;uart.c: 4: void init_uart(unsigned long baud);uart.c: 5: {;uart.c: 7:     SPEN = 1;
  1438     0580  1283               	bcf	3,5	;RP0=0, select bank0
  1439     0581  1303               	bcf	3,6	;RP1=0, select bank0
  1440     0582  1798               	bsf	24,7	;volatile
  1441                           
  1442                           ;uart.c: 10:     BRGH = 1;
  1443     0583  1683               	bsf	3,5	;RP0=1, select bank1
  1444     0584  1303               	bcf	3,6	;RP1=0, select bank1
  1445     0585  1518               	bsf	24,2	;volatile
  1446                           
  1447                           ;uart.c: 13:     TXEN = 1;
  1448     0586  1698               	bsf	24,5	;volatile
  1449                           
  1450                           ;uart.c: 16:     CREN = 1;
  1451     0587  1283               	bcf	3,5	;RP0=0, select bank0
  1452     0588  1303               	bcf	3,6	;RP1=0, select bank0
  1453     0589  1618               	bsf	24,4	;volatile
  1454     058A                     l1055:
  1455                           
  1456                           ;uart.c: 19:     SPBRG = (20000000 / (16 * baud)) - 1;
  1457     058A  0820               	movf	init_uart@baud,w
  1458     058B  00A4               	movwf	??_init_uart
  1459     058C  0821               	movf	init_uart@baud+1,w
  1460     058D  00A5               	movwf	??_init_uart+1
  1461     058E  0822               	movf	init_uart@baud+2,w
  1462     058F  00A6               	movwf	??_init_uart+2
  1463     0590  0823               	movf	init_uart@baud+3,w
  1464     0591  00A7               	movwf	??_init_uart+3
  1465     0592  3004               	movlw	4
  1466     0593                     u435:
  1467     0593  1003               	clrc
  1468     0594  0DA4               	rlf	??_init_uart,f
  1469     0595  0DA5               	rlf	??_init_uart+1,f
  1470     0596  0DA6               	rlf	??_init_uart+2,f
  1471     0597  0DA7               	rlf	??_init_uart+3,f
  1472     0598                     u430:
  1473     0598  3EFF               	addlw	-1
  1474     0599  1D03               	skipz
  1475     059A  2D93               	goto	u435
  1476     059B  0827               	movf	??_init_uart+3,w
  1477     059C  00F3               	movwf	___lldiv@divisor+3
  1478     059D  0826               	movf	??_init_uart+2,w
  1479     059E  00F2               	movwf	___lldiv@divisor+2
  1480     059F  0825               	movf	??_init_uart+1,w
  1481     05A0  00F1               	movwf	___lldiv@divisor+1
  1482     05A1  0824               	movf	??_init_uart,w
  1483     05A2  00F0               	movwf	___lldiv@divisor
  1484     05A3  3001               	movlw	1
  1485     05A4  00F7               	movwf	___lldiv@dividend+3
  1486     05A5  3031               	movlw	49
  1487     05A6  00F6               	movwf	___lldiv@dividend+2
  1488     05A7  302D               	movlw	45
  1489     05A8  00F5               	movwf	___lldiv@dividend+1
  1490     05A9  3000               	movlw	0
  1491     05AA  00F4               	movwf	___lldiv@dividend
  1492     05AB  120A  118A  2665  120A  118A  	fcall	___lldiv
  1493     05B0  0870               	movf	?___lldiv,w
  1494     05B1  3EFF               	addlw	255
  1495     05B2  1683               	bsf	3,5	;RP0=1, select bank1
  1496     05B3  1303               	bcf	3,6	;RP1=0, select bank1
  1497     05B4  0099               	movwf	25	;volatile
  1498     05B5                     l108:
  1499     05B5  0008               	return
  1500     05B6                     __end_of_init_uart:
  1501                           
  1502                           	psect	text7
  1503     0665                     __ptext7:	
  1504 ;; *************** function ___lldiv *****************
  1505 ;; Defined at:
  1506 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\__lldiv.c"
  1507 ;; Parameters:    Size  Location     Type
  1508 ;;  divisor         4    0[COMMON] unsigned long 
  1509 ;;  dividend        4    4[COMMON] unsigned long 
  1510 ;; Auto vars:     Size  Location     Type
  1511 ;;  quotient        4    9[COMMON] unsigned long 
  1512 ;;  counter         1   13[COMMON] unsigned char 
  1513 ;; Return value:  Size  Location     Type
  1514 ;;                  4    0[COMMON] unsigned long 
  1515 ;; Registers used:
  1516 ;;		wreg, status,2, status,0
  1517 ;; Tracked objects:
  1518 ;;		On entry : 0/0
  1519 ;;		On exit  : 0/0
  1520 ;;		Unchanged: 0/0
  1521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1522 ;;      Params:         8       0       0       0       0
  1523 ;;      Locals:         5       0       0       0       0
  1524 ;;      Temps:          1       0       0       0       0
  1525 ;;      Totals:        14       0       0       0       0
  1526 ;;Total ram usage:       14 bytes
  1527 ;; Hardware stack levels used: 1
  1528 ;; This function calls:
  1529 ;;		Nothing
  1530 ;; This function is called by:
  1531 ;;		_init_uart
  1532 ;; This function uses a non-reentrant model
  1533 ;;
  1534                           
  1535     0665                     ___lldiv:	
  1536                           ;psect for function ___lldiv
  1537                           
  1538     0665                     l1021:	
  1539                           ;incstack = 0
  1540                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  1541                           
  1542     0665  3000               	movlw	0
  1543     0666  00FC               	movwf	___lldiv@quotient+3
  1544     0667  3000               	movlw	0
  1545     0668  00FB               	movwf	___lldiv@quotient+2
  1546     0669  3000               	movlw	0
  1547     066A  00FA               	movwf	___lldiv@quotient+1
  1548     066B  3000               	movlw	0
  1549     066C  00F9               	movwf	___lldiv@quotient
  1550     066D  0873               	movf	___lldiv@divisor+3,w
  1551     066E  0472               	iorwf	___lldiv@divisor+2,w
  1552     066F  0471               	iorwf	___lldiv@divisor+1,w
  1553     0670  0470               	iorwf	___lldiv@divisor,w
  1554     0671  1903               	skipnz
  1555     0672  2E74               	goto	u361
  1556     0673  2E75               	goto	u360
  1557     0674                     u361:
  1558     0674  2EC2               	goto	l1041
  1559     0675                     u360:
  1560     0675                     l1023:
  1561     0675  01FD               	clrf	___lldiv@counter
  1562     0676  0AFD               	incf	___lldiv@counter,f
  1563     0677  2E85               	goto	l1027
  1564     0678                     l1025:
  1565     0678  3001               	movlw	1
  1566     0679  00F8               	movwf	??___lldiv
  1567     067A                     u375:
  1568     067A  1003               	clrc
  1569     067B  0DF0               	rlf	___lldiv@divisor,f
  1570     067C  0DF1               	rlf	___lldiv@divisor+1,f
  1571     067D  0DF2               	rlf	___lldiv@divisor+2,f
  1572     067E  0DF3               	rlf	___lldiv@divisor+3,f
  1573     067F  0BF8               	decfsz	??___lldiv,f
  1574     0680  2E7A               	goto	u375
  1575     0681  3001               	movlw	1
  1576     0682  00F8               	movwf	??___lldiv
  1577     0683  0878               	movf	??___lldiv,w
  1578     0684  07FD               	addwf	___lldiv@counter,f
  1579     0685                     l1027:
  1580     0685  1FF3               	btfss	___lldiv@divisor+3,7
  1581     0686  2E88               	goto	u381
  1582     0687  2E89               	goto	u380
  1583     0688                     u381:
  1584     0688  2E78               	goto	l1025
  1585     0689                     u380:
  1586     0689                     l1029:
  1587     0689  3001               	movlw	1
  1588     068A  00F8               	movwf	??___lldiv
  1589     068B                     u395:
  1590     068B  1003               	clrc
  1591     068C  0DF9               	rlf	___lldiv@quotient,f
  1592     068D  0DFA               	rlf	___lldiv@quotient+1,f
  1593     068E  0DFB               	rlf	___lldiv@quotient+2,f
  1594     068F  0DFC               	rlf	___lldiv@quotient+3,f
  1595     0690  0BF8               	decfsz	??___lldiv,f
  1596     0691  2E8B               	goto	u395
  1597     0692                     l1031:
  1598     0692  0873               	movf	___lldiv@divisor+3,w
  1599     0693  0277               	subwf	___lldiv@dividend+3,w
  1600     0694  1D03               	skipz
  1601     0695  2EA0               	goto	u405
  1602     0696  0872               	movf	___lldiv@divisor+2,w
  1603     0697  0276               	subwf	___lldiv@dividend+2,w
  1604     0698  1D03               	skipz
  1605     0699  2EA0               	goto	u405
  1606     069A  0871               	movf	___lldiv@divisor+1,w
  1607     069B  0275               	subwf	___lldiv@dividend+1,w
  1608     069C  1D03               	skipz
  1609     069D  2EA0               	goto	u405
  1610     069E  0870               	movf	___lldiv@divisor,w
  1611     069F  0274               	subwf	___lldiv@dividend,w
  1612     06A0                     u405:
  1613     06A0  1C03               	skipc
  1614     06A1  2EA3               	goto	u401
  1615     06A2  2EA4               	goto	u400
  1616     06A3                     u401:
  1617     06A3  2EB3               	goto	l1037
  1618     06A4                     u400:
  1619     06A4                     l1033:
  1620     06A4  0870               	movf	___lldiv@divisor,w
  1621     06A5  02F4               	subwf	___lldiv@dividend,f
  1622     06A6  0871               	movf	___lldiv@divisor+1,w
  1623     06A7  1C03               	skipc
  1624     06A8  0F71               	incfsz	___lldiv@divisor+1,w
  1625     06A9  02F5               	subwf	___lldiv@dividend+1,f
  1626     06AA  0872               	movf	___lldiv@divisor+2,w
  1627     06AB  1C03               	skipc
  1628     06AC  0F72               	incfsz	___lldiv@divisor+2,w
  1629     06AD  02F6               	subwf	___lldiv@dividend+2,f
  1630     06AE  0873               	movf	___lldiv@divisor+3,w
  1631     06AF  1C03               	skipc
  1632     06B0  0F73               	incfsz	___lldiv@divisor+3,w
  1633     06B1  02F7               	subwf	___lldiv@dividend+3,f
  1634     06B2                     l1035:
  1635     06B2  1479               	bsf	___lldiv@quotient,0
  1636     06B3                     l1037:
  1637     06B3  3001               	movlw	1
  1638     06B4                     u415:
  1639     06B4  1003               	clrc
  1640     06B5  0CF3               	rrf	___lldiv@divisor+3,f
  1641     06B6  0CF2               	rrf	___lldiv@divisor+2,f
  1642     06B7  0CF1               	rrf	___lldiv@divisor+1,f
  1643     06B8  0CF0               	rrf	___lldiv@divisor,f
  1644     06B9  3EFF               	addlw	-1
  1645     06BA  1D03               	skipz
  1646     06BB  2EB4               	goto	u415
  1647     06BC                     l1039:
  1648     06BC  3001               	movlw	1
  1649     06BD  02FD               	subwf	___lldiv@counter,f
  1650     06BE  1D03               	btfss	3,2
  1651     06BF  2EC1               	goto	u421
  1652     06C0  2EC2               	goto	u420
  1653     06C1                     u421:
  1654     06C1  2E89               	goto	l1029
  1655     06C2                     u420:
  1656     06C2                     l1041:
  1657     06C2  087C               	movf	___lldiv@quotient+3,w
  1658     06C3  00F3               	movwf	?___lldiv+3
  1659     06C4  087B               	movf	___lldiv@quotient+2,w
  1660     06C5  00F2               	movwf	?___lldiv+2
  1661     06C6  087A               	movf	___lldiv@quotient+1,w
  1662     06C7  00F1               	movwf	?___lldiv+1
  1663     06C8  0879               	movf	___lldiv@quotient,w
  1664     06C9  00F0               	movwf	?___lldiv
  1665     06CA                     l253:
  1666     06CA  0008               	return
  1667     06CB                     __end_of___lldiv:
  1668                           
  1669                           	psect	text8
  1670     0450                     __ptext8:	
  1671 ;; *************** function _init_clcd *****************
  1672 ;; Defined at:
  1673 ;;		line 45 in file "clcd.c"
  1674 ;; Parameters:    Size  Location     Type
  1675 ;;		None
  1676 ;; Auto vars:     Size  Location     Type
  1677 ;;		None
  1678 ;; Return value:  Size  Location     Type
  1679 ;;                  1    wreg      void 
  1680 ;; Registers used:
  1681 ;;		wreg, status,2, status,0, pclath, cstack
  1682 ;; Tracked objects:
  1683 ;;		On entry : 0/0
  1684 ;;		On exit  : 0/0
  1685 ;;		Unchanged: 0/0
  1686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1687 ;;      Params:         0       0       0       0       0
  1688 ;;      Locals:         0       0       0       0       0
  1689 ;;      Temps:          0       0       0       0       0
  1690 ;;      Totals:         0       0       0       0       0
  1691 ;;Total ram usage:        0 bytes
  1692 ;; Hardware stack levels used: 1
  1693 ;; Hardware stack levels required when called: 2
  1694 ;; This function calls:
  1695 ;;		_init_display_controller
  1696 ;; This function is called by:
  1697 ;;		_init_config
  1698 ;; This function uses a non-reentrant model
  1699 ;;
  1700                           
  1701     0450                     _init_clcd:	
  1702                           ;psect for function _init_clcd
  1703                           
  1704     0450                     l1045:	
  1705                           ;incstack = 0
  1706                           ; Regs used in _init_clcd: [wreg+status,2+status,0+pclath+cstack]
  1707                           
  1708                           
  1709                           ;clcd.c: 48:     TRISD = 0x00;
  1710     0450  1683               	bsf	3,5	;RP0=1, select bank1
  1711     0451  1303               	bcf	3,6	;RP1=0, select bank1
  1712     0452  0188               	clrf	8	;volatile
  1713     0453                     l1047:
  1714                           
  1715                           ;clcd.c: 51:     TRISE2 = 0;
  1716     0453  1109               	bcf	9,2	;volatile
  1717     0454                     l1049:
  1718                           
  1719                           ;clcd.c: 52:     TRISE1 = 0;
  1720     0454  1089               	bcf	9,1	;volatile
  1721     0455                     l1051:
  1722                           
  1723                           ;clcd.c: 54:     init_display_controller();
  1724     0455  120A  118A  2602  120A  118A  	fcall	_init_display_controller
  1725     045A                     l23:
  1726     045A  0008               	return
  1727     045B                     __end_of_init_clcd:
  1728                           
  1729                           	psect	text9
  1730     0602                     __ptext9:	
  1731 ;; *************** function _init_display_controller *****************
  1732 ;; Defined at:
  1733 ;;		line 21 in file "clcd.c"
  1734 ;; Parameters:    Size  Location     Type
  1735 ;;		None
  1736 ;; Auto vars:     Size  Location     Type
  1737 ;;		None
  1738 ;; Return value:  Size  Location     Type
  1739 ;;                  1    wreg      void 
  1740 ;; Registers used:
  1741 ;;		wreg, status,2, status,0, pclath, cstack
  1742 ;; Tracked objects:
  1743 ;;		On entry : 0/0
  1744 ;;		On exit  : 0/0
  1745 ;;		Unchanged: 0/0
  1746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1747 ;;      Params:         0       0       0       0       0
  1748 ;;      Locals:         0       0       0       0       0
  1749 ;;      Temps:          2       0       0       0       0
  1750 ;;      Totals:         2       0       0       0       0
  1751 ;;Total ram usage:        2 bytes
  1752 ;; Hardware stack levels used: 1
  1753 ;; Hardware stack levels required when called: 1
  1754 ;; This function calls:
  1755 ;;		_clcd_write
  1756 ;; This function is called by:
  1757 ;;		_init_clcd
  1758 ;; This function uses a non-reentrant model
  1759 ;;
  1760                           
  1761     0602                     _init_display_controller:	
  1762                           ;psect for function _init_display_controller
  1763                           
  1764     0602                     l995:	
  1765                           ;incstack = 0
  1766                           ; Regs used in _init_display_controller: [wreg+status,2+status,0+pclath+cstack]
  1767                           
  1768                           
  1769                           ;clcd.c: 24:     _delay((unsigned long)((30)*(20000000/4000.0)));
  1770     0602  30C3               	movlw	195
  1771     0603  00F5               	movwf	??_init_display_controller+1
  1772     0604  30CD               	movlw	205
  1773     0605  00F4               	movwf	??_init_display_controller
  1774     0606                     u637:
  1775     0606  0BF4               	decfsz	??_init_display_controller,f
  1776     0607  2E06               	goto	u637
  1777     0608  0BF5               	decfsz	??_init_display_controller+1,f
  1778     0609  2E06               	goto	u637
  1779     060A                     l997:
  1780                           
  1781                           ;clcd.c: 27:     clcd_write(0x33, 0);
  1782     060A  01F0               	clrf	clcd_write@mode
  1783     060B  3033               	movlw	51
  1784     060C  120A  118A  2514  120A  118A  	fcall	_clcd_write
  1785     0611                     l999:
  1786                           
  1787                           ;clcd.c: 28:     _delay((unsigned long)((4100)*(20000000/4000000.0)));
  1788     0611  301B               	movlw	27
  1789     0612  00F5               	movwf	??_init_display_controller+1
  1790     0613  309E               	movlw	158
  1791     0614  00F4               	movwf	??_init_display_controller
  1792     0615                     u647:
  1793     0615  0BF4               	decfsz	??_init_display_controller,f
  1794     0616  2E15               	goto	u647
  1795     0617  0BF5               	decfsz	??_init_display_controller+1,f
  1796     0618  2E15               	goto	u647
  1797     0619  0000               	nop
  1798                           
  1799                           ;clcd.c: 29:     clcd_write(0x33, 0);
  1800     061A  01F0               	clrf	clcd_write@mode
  1801     061B  3033               	movlw	51
  1802     061C  120A  118A  2514  120A  118A  	fcall	_clcd_write
  1803     0621                     l1001:
  1804                           
  1805                           ;clcd.c: 30:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  1806     0621  30A6               	movlw	166
  1807     0622  00F4               	movwf	??_init_display_controller
  1808     0623                     u657:
  1809     0623  0BF4               	decfsz	??_init_display_controller,f
  1810     0624  2E23               	goto	u657
  1811     0625  0000               	nop
  1812     0626                     l1003:
  1813                           
  1814                           ;clcd.c: 31:     clcd_write(0x33, 0);
  1815     0626  01F0               	clrf	clcd_write@mode
  1816     0627  3033               	movlw	51
  1817     0628  120A  118A  2514  120A  118A  	fcall	_clcd_write
  1818     062D                     l1005:
  1819                           
  1820                           ;clcd.c: 32:     _delay((unsigned long)((1)*(20000000/4000000.0)));
  1821     062D  2E2E               	nop2	;2 cycle nop
  1822     062E  2E2F               	nop2	;2 cycle nop
  1823     062F  0000               	nop
  1824     0630                     l1007:
  1825                           
  1826                           ;clcd.c: 34:     clcd_write(0x02, 0);
  1827     0630  01F0               	clrf	clcd_write@mode
  1828     0631  3002               	movlw	2
  1829     0632  120A  118A  2514  120A  118A  	fcall	_clcd_write
  1830     0637                     l1009:
  1831                           
  1832                           ;clcd.c: 35:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  1833     0637  30A6               	movlw	166
  1834     0638  00F4               	movwf	??_init_display_controller
  1835     0639                     u667:
  1836     0639  0BF4               	decfsz	??_init_display_controller,f
  1837     063A  2E39               	goto	u667
  1838     063B  0000               	nop
  1839                           
  1840                           ;clcd.c: 36:     clcd_write(0x28, 0);
  1841     063C  01F0               	clrf	clcd_write@mode
  1842     063D  3028               	movlw	40
  1843     063E  120A  118A  2514  120A  118A  	fcall	_clcd_write
  1844     0643                     l1011:
  1845                           
  1846                           ;clcd.c: 37:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  1847     0643  30A6               	movlw	166
  1848     0644  00F4               	movwf	??_init_display_controller
  1849     0645                     u677:
  1850     0645  0BF4               	decfsz	??_init_display_controller,f
  1851     0646  2E45               	goto	u677
  1852     0647  0000               	nop
  1853     0648                     l1013:
  1854                           
  1855                           ;clcd.c: 38:     clcd_write(0x01, 0);
  1856     0648  01F0               	clrf	clcd_write@mode
  1857     0649  3001               	movlw	1
  1858     064A  120A  118A  2514  120A  118A  	fcall	_clcd_write
  1859                           
  1860                           ;clcd.c: 39:     _delay((unsigned long)((500)*(20000000/4000000.0)));
  1861     064F  3004               	movlw	4
  1862     0650  00F5               	movwf	??_init_display_controller+1
  1863     0651  303D               	movlw	61
  1864     0652  00F4               	movwf	??_init_display_controller
  1865     0653                     u687:
  1866     0653  0BF4               	decfsz	??_init_display_controller,f
  1867     0654  2E53               	goto	u687
  1868     0655  0BF5               	decfsz	??_init_display_controller+1,f
  1869     0656  2E53               	goto	u687
  1870     0657  2E58               	nop2
  1871     0658                     l1015:
  1872                           
  1873                           ;clcd.c: 40:     clcd_write(0x0C, 0);
  1874     0658  01F0               	clrf	clcd_write@mode
  1875     0659  300C               	movlw	12
  1876     065A  120A  118A  2514  120A  118A  	fcall	_clcd_write
  1877     065F                     l1017:
  1878                           
  1879                           ;clcd.c: 41:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  1880     065F  30A6               	movlw	166
  1881     0660  00F4               	movwf	??_init_display_controller
  1882     0661                     u697:
  1883     0661  0BF4               	decfsz	??_init_display_controller,f
  1884     0662  2E61               	goto	u697
  1885     0663  0000               	nop
  1886     0664                     l20:
  1887     0664  0008               	return
  1888     0665                     __end_of_init_display_controller:
  1889                           
  1890                           	psect	text10
  1891     04EA                     __ptext10:	
  1892 ;; *************** function _gets *****************
  1893 ;; Defined at:
  1894 ;;		line 59 in file "uart.c"
  1895 ;; Parameters:    Size  Location     Type
  1896 ;;  string          1    wreg     PTR unsigned char 
  1897 ;;		 -> main@str(90), 
  1898 ;; Auto vars:     Size  Location     Type
  1899 ;;  string          1    2[COMMON] PTR unsigned char 
  1900 ;;		 -> main@str(90), 
  1901 ;;  i               1    3[COMMON] unsigned char 
  1902 ;;  J               1    1[COMMON] unsigned char 
  1903 ;; Return value:  Size  Location     Type
  1904 ;;                  1    wreg      void 
  1905 ;; Registers used:
  1906 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1907 ;; Tracked objects:
  1908 ;;		On entry : 0/0
  1909 ;;		On exit  : 0/0
  1910 ;;		Unchanged: 0/0
  1911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1912 ;;      Params:         0       0       0       0       0
  1913 ;;      Locals:         3       0       0       0       0
  1914 ;;      Temps:          1       0       0       0       0
  1915 ;;      Totals:         4       0       0       0       0
  1916 ;;Total ram usage:        4 bytes
  1917 ;; Hardware stack levels used: 1
  1918 ;; Hardware stack levels required when called: 1
  1919 ;; This function calls:
  1920 ;;		_getchar
  1921 ;; This function is called by:
  1922 ;;		_main
  1923 ;; This function uses a non-reentrant model
  1924 ;;
  1925                           
  1926     04EA                     _gets:	
  1927                           ;psect for function _gets
  1928                           
  1929                           
  1930                           ;incstack = 0
  1931                           ; Regs used in _gets: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1932                           ;gets@string stored from wreg
  1933     04EA  00F2               	movwf	gets@string
  1934     04EB                     l1107:
  1935                           
  1936                           ;uart.c: 59: void gets(char *string);uart.c: 60: {;uart.c: 62: unsigned char i=0,J=0;
  1937     04EB  01F3               	clrf	gets@i
  1938     04EC                     l1109:
  1939                           
  1940                           ;uart.c: 64: {;uart.c: 65:     *(string+i)= getchar();
  1941     04EC  0873               	movf	gets@i,w
  1942     04ED  0772               	addwf	gets@string,w
  1943     04EE  00F0               	movwf	??_gets
  1944     04EF  0870               	movf	??_gets,w
  1945     04F0  0084               	movwf	4
  1946     04F1  120A  118A  2447  120A  118A  	fcall	_getchar
  1947     04F6  1783               	bsf	3,7	;select IRP bank2
  1948     04F7  0080               	movwf	0
  1949     04F8                     l1111:
  1950                           
  1951                           ;uart.c: 67:     J = *(string+i);
  1952     04F8  0873               	movf	gets@i,w
  1953     04F9  0772               	addwf	gets@string,w
  1954     04FA  00F0               	movwf	??_gets
  1955     04FB  0870               	movf	??_gets,w
  1956     04FC  0084               	movwf	4
  1957     04FD  0800               	movf	0,w
  1958     04FE  00F1               	movwf	gets@J
  1959     04FF                     l1113:
  1960                           
  1961                           ;uart.c: 69:     i++;
  1962     04FF  3001               	movlw	1
  1963     0500  00F0               	movwf	??_gets
  1964     0501  0870               	movf	??_gets,w
  1965     0502  07F3               	addwf	gets@i,f
  1966     0503                     l1115:
  1967                           
  1968                           ;uart.c: 70: }
  1969     0503  300A               	movlw	10
  1970     0504  0671               	xorwf	gets@J,w
  1971     0505  1D03               	btfss	3,2
  1972     0506  2D08               	goto	u501
  1973     0507  2D09               	goto	u500
  1974     0508                     u501:
  1975     0508  2CEC               	goto	l1109
  1976     0509                     u500:
  1977     0509                     l1117:
  1978                           
  1979                           ;uart.c: 73:     i++;
  1980     0509  3001               	movlw	1
  1981     050A  00F0               	movwf	??_gets
  1982     050B  0870               	movf	??_gets,w
  1983     050C  07F3               	addwf	gets@i,f
  1984     050D                     l1119:
  1985                           
  1986                           ;uart.c: 74:     *(string+i) = '\0';
  1987     050D  0873               	movf	gets@i,w
  1988     050E  0772               	addwf	gets@string,w
  1989     050F  00F0               	movwf	??_gets
  1990     0510  0870               	movf	??_gets,w
  1991     0511  0084               	movwf	4
  1992     0512  0180               	clrf	0
  1993     0513                     l131:
  1994     0513  0008               	return
  1995     0514                     __end_of_gets:
  1996                           
  1997                           	psect	text11
  1998     0447                     __ptext11:	
  1999 ;; *************** function _getchar *****************
  2000 ;; Defined at:
  2001 ;;		line 22 in file "uart.c"
  2002 ;; Parameters:    Size  Location     Type
  2003 ;;		None
  2004 ;; Auto vars:     Size  Location     Type
  2005 ;;		None
  2006 ;; Return value:  Size  Location     Type
  2007 ;;                  1    wreg      unsigned char 
  2008 ;; Registers used:
  2009 ;;		wreg
  2010 ;; Tracked objects:
  2011 ;;		On entry : 0/0
  2012 ;;		On exit  : 0/0
  2013 ;;		Unchanged: 0/0
  2014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2015 ;;      Params:         0       0       0       0       0
  2016 ;;      Locals:         0       0       0       0       0
  2017 ;;      Temps:          0       0       0       0       0
  2018 ;;      Totals:         0       0       0       0       0
  2019 ;;Total ram usage:        0 bytes
  2020 ;; Hardware stack levels used: 1
  2021 ;; This function calls:
  2022 ;;		Nothing
  2023 ;; This function is called by:
  2024 ;;		_gets
  2025 ;; This function uses a non-reentrant model
  2026 ;;
  2027                           
  2028     0447                     _getchar:	
  2029                           ;psect for function _getchar
  2030                           
  2031     0447                     l1065:	
  2032                           ;incstack = 0
  2033                           ; Regs used in _getchar: [wreg]
  2034                           
  2035     0447                     l111:	
  2036                           ;uart.c: 28:     }
  2037                           
  2038                           
  2039                           ;uart.c: 25:     while (RCIF != 1)
  2040     0447  1283               	bcf	3,5	;RP0=0, select bank0
  2041     0448  1303               	bcf	3,6	;RP1=0, select bank0
  2042     0449  1E8C               	btfss	12,5	;volatile
  2043     044A  2C4C               	goto	u451
  2044     044B  2C4D               	goto	u450
  2045     044C                     u451:
  2046     044C  2C47               	goto	l111
  2047     044D                     u450:
  2048     044D                     l113:
  2049                           
  2050                           ;uart.c: 31:     RCIF = 0;
  2051     044D  128C               	bcf	12,5	;volatile
  2052     044E                     l1067:
  2053                           
  2054                           ;uart.c: 34:     return RCREG;
  2055     044E  081A               	movf	26,w	;volatile
  2056     044F                     l114:
  2057     044F  0008               	return
  2058     0450                     __end_of_getchar:
  2059                           
  2060                           	psect	text12
  2061     054A                     __ptext12:	
  2062 ;; *************** function _clcd_write@main$F83 *****************
  2063 ;; Defined at:
  2064 ;;		line 29 in file "main.c"
  2065 ;; Parameters:    Size  Location     Type
  2066 ;;  byte            1    wreg     unsigned char 
  2067 ;;  mode            1    0[COMMON] unsigned char 
  2068 ;; Auto vars:     Size  Location     Type
  2069 ;;  byte            1    3[COMMON] unsigned char 
  2070 ;; Return value:  Size  Location     Type
  2071 ;;                  1    wreg      void 
  2072 ;; Registers used:
  2073 ;;		wreg, status,2, status,0
  2074 ;; Tracked objects:
  2075 ;;		On entry : 0/0
  2076 ;;		On exit  : 0/0
  2077 ;;		Unchanged: 0/0
  2078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2079 ;;      Params:         1       0       0       0       0
  2080 ;;      Locals:         1       0       0       0       0
  2081 ;;      Temps:          2       0       0       0       0
  2082 ;;      Totals:         4       0       0       0       0
  2083 ;;Total ram usage:        4 bytes
  2084 ;; Hardware stack levels used: 1
  2085 ;; This function calls:
  2086 ;;		Nothing
  2087 ;; This function is called by:
  2088 ;;		_main
  2089 ;; This function uses a non-reentrant model
  2090 ;;
  2091                           
  2092     054A                     _clcd_write@main$F83:	
  2093                           ;psect for function _clcd_write@main$F83
  2094                           
  2095                           
  2096                           ;incstack = 0
  2097                           ; Regs used in _clcd_write@main$F83: [wreg+status,2+status,0]
  2098                           ;clcd_write@main$F83@byte stored from wreg
  2099     054A  00F3               	movwf	clcd_write@main$F83@byte
  2100     054B                     l1079:
  2101                           
  2102                           ;main.c: 29: };main.c: 30: ;main.c: 31: void main(void) {
  2103     054B  1870               	btfsc	clcd_write@main$F83@mode,0
  2104     054C  2D4E               	goto	u471
  2105     054D  2D52               	goto	u470
  2106     054E                     u471:
  2107     054E  1283               	bcf	3,5	;RP0=0, select bank0
  2108     054F  1303               	bcf	3,6	;RP1=0, select bank0
  2109     0550  1509               	bsf	9,2	;volatile
  2110     0551  2D55               	goto	u484
  2111     0552                     u470:
  2112     0552  1283               	bcf	3,5	;RP0=0, select bank0
  2113     0553  1303               	bcf	3,6	;RP1=0, select bank0
  2114     0554  1109               	bcf	9,2	;volatile
  2115     0555                     u484:
  2116     0555                     l1081:
  2117                           
  2118                           ;main.c: 33:     char ch, str[90]="", str1[17]="",str2[17]="";
  2119     0555  0873               	movf	clcd_write@main$F83@byte,w
  2120     0556  39F0               	andlw	240
  2121     0557  0088               	movwf	8	;volatile
  2122     0558                     l1083:
  2123                           
  2124                           ;main.c: 34:     unsigned int i = 0, count = 0;
  2125     0558  1489               	bsf	9,1	;volatile
  2126     0559                     l1085:
  2127                           
  2128                           ;main.c: 35:     init_config();
  2129     0559  30A6               	movlw	166
  2130     055A  00F1               	movwf	??_clcd_write@main$F83
  2131     055B                     u707:
  2132     055B  0BF1               	decfsz	??_clcd_write@main$F83,f
  2133     055C  2D5B               	goto	u707
  2134     055D  0000               	nop
  2135     055E                     l1087:
  2136                           
  2137                           ;main.c: 36: 
  2138     055E  1283               	bcf	3,5	;RP0=0, select bank0
  2139     055F  1303               	bcf	3,6	;RP1=0, select bank0
  2140     0560  1089               	bcf	9,1	;volatile
  2141     0561                     l1089:
  2142                           
  2143                           ;main.c: 38:     {
  2144     0561  0873               	movf	clcd_write@main$F83@byte,w
  2145     0562  390F               	andlw	15
  2146     0563  00F1               	movwf	??_clcd_write@main$F83
  2147     0564  3003               	movlw	3
  2148     0565                     u495:
  2149     0565  1003               	clrc
  2150     0566  0DF1               	rlf	??_clcd_write@main$F83,f
  2151     0567  3EFF               	addlw	-1
  2152     0568  1D03               	skipz
  2153     0569  2D65               	goto	u495
  2154     056A  1003               	clrc
  2155     056B  0D71               	rlf	??_clcd_write@main$F83,w
  2156     056C  0088               	movwf	8	;volatile
  2157     056D                     l1091:
  2158                           
  2159                           ;main.c: 39:         gets(str);
  2160     056D  1489               	bsf	9,1	;volatile
  2161     056E                     l1093:
  2162                           
  2163                           ;main.c: 40:         puts(str);
  2164     056E  30A6               	movlw	166
  2165     056F  00F1               	movwf	??_clcd_write@main$F83
  2166     0570                     u717:
  2167     0570  0BF1               	decfsz	??_clcd_write@main$F83,f
  2168     0571  2D70               	goto	u717
  2169     0572  0000               	nop
  2170     0573                     l1095:
  2171                           
  2172                           ;main.c: 41:         for(i = 0; i < strlen(str); i++)
  2173     0573  1283               	bcf	3,5	;RP0=0, select bank0
  2174     0574  1303               	bcf	3,6	;RP1=0, select bank0
  2175     0575  1089               	bcf	9,1	;volatile
  2176     0576                     l1097:
  2177                           
  2178                           ;main.c: 43:             count++;
  2179     0576  301B               	movlw	27
  2180     0577  00F2               	movwf	??_clcd_write@main$F83+1
  2181     0578  309E               	movlw	158
  2182     0579  00F1               	movwf	??_clcd_write@main$F83
  2183     057A                     u727:
  2184     057A  0BF1               	decfsz	??_clcd_write@main$F83,f
  2185     057B  2D7A               	goto	u727
  2186     057C  0BF2               	decfsz	??_clcd_write@main$F83+1,f
  2187     057D  2D7A               	goto	u727
  2188     057E  0000               	nop
  2189     057F                     l61:
  2190     057F  0008               	return
  2191     0580                     __end_of_clcd_write@main$F83:
  2192                           
  2193                           	psect	text13
  2194     0484                     __ptext13:	
  2195 ;; *************** function _clcd_print *****************
  2196 ;; Defined at:
  2197 ;;		line 63 in file "clcd.c"
  2198 ;; Parameters:    Size  Location     Type
  2199 ;;  str             1    wreg     PTR const unsigned char 
  2200 ;;		 -> main@str2(17), main@str1(17), 
  2201 ;;  addr            1    4[COMMON] unsigned char 
  2202 ;; Auto vars:     Size  Location     Type
  2203 ;;  str             1    6[COMMON] PTR const unsigned char 
  2204 ;;		 -> main@str2(17), main@str1(17), 
  2205 ;; Return value:  Size  Location     Type
  2206 ;;                  1    wreg      void 
  2207 ;; Registers used:
  2208 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2209 ;; Tracked objects:
  2210 ;;		On entry : 0/0
  2211 ;;		On exit  : 0/0
  2212 ;;		Unchanged: 0/0
  2213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2214 ;;      Params:         1       0       0       0       0
  2215 ;;      Locals:         1       0       0       0       0
  2216 ;;      Temps:          1       0       0       0       0
  2217 ;;      Totals:         3       0       0       0       0
  2218 ;;Total ram usage:        3 bytes
  2219 ;; Hardware stack levels used: 1
  2220 ;; Hardware stack levels required when called: 1
  2221 ;; This function calls:
  2222 ;;		_clcd_write
  2223 ;; This function is called by:
  2224 ;;		_main
  2225 ;; This function uses a non-reentrant model
  2226 ;;
  2227                           
  2228     0484                     _clcd_print:	
  2229                           ;psect for function _clcd_print
  2230                           
  2231                           
  2232                           ;incstack = 0
  2233                           ; Regs used in _clcd_print: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2234                           ;clcd_print@str stored from wreg
  2235     0484  00F6               	movwf	clcd_print@str
  2236     0485                     l1071:
  2237                           
  2238                           ;clcd.c: 63: void clcd_print(const char *str, unsigned char addr);clcd.c: 64: {;clcd.c: 
      +                          65:     clcd_write(addr, 0);
  2239     0485  01F0               	clrf	clcd_write@mode
  2240     0486  0874               	movf	clcd_print@addr,w
  2241     0487  120A  118A  2514  120A  118A  	fcall	_clcd_write
  2242                           
  2243                           ;clcd.c: 67:     while (*str != '\0')
  2244     048C  2C9B               	goto	l1077
  2245     048D                     l1073:
  2246                           
  2247                           ;clcd.c: 68:     {;clcd.c: 69:         clcd_write(*str, 1);
  2248     048D  01F0               	clrf	clcd_write@mode
  2249     048E  0AF0               	incf	clcd_write@mode,f
  2250     048F  0876               	movf	clcd_print@str,w
  2251     0490  0084               	movwf	4
  2252     0491  0800               	movf	0,w
  2253     0492  120A  118A  2514  120A  118A  	fcall	_clcd_write
  2254     0497                     l1075:
  2255                           
  2256                           ;clcd.c: 70:         str++;
  2257     0497  3001               	movlw	1
  2258     0498  00F5               	movwf	??_clcd_print
  2259     0499  0875               	movf	??_clcd_print,w
  2260     049A  07F6               	addwf	clcd_print@str,f
  2261     049B                     l1077:
  2262                           
  2263                           ;clcd.c: 67:     while (*str != '\0')
  2264     049B  0876               	movf	clcd_print@str,w
  2265     049C  0084               	movwf	4
  2266     049D  1383               	bcf	3,7	;select IRP bank0
  2267     049E  0800               	movf	0,w
  2268     049F  1D03               	btfss	3,2
  2269     04A0  2CA2               	goto	u461
  2270     04A1  2CA3               	goto	u460
  2271     04A2                     u461:
  2272     04A2  2C8D               	goto	l1073
  2273     04A3                     u460:
  2274     04A3                     l32:
  2275     04A3  0008               	return
  2276     04A4                     __end_of_clcd_print:
  2277                           
  2278                           	psect	text14
  2279     0514                     __ptext14:	
  2280 ;; *************** function _clcd_write *****************
  2281 ;; Defined at:
  2282 ;;		line 4 in file "clcd.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;  byte            1    wreg     unsigned char 
  2285 ;;  mode            1    0[COMMON] unsigned char 
  2286 ;; Auto vars:     Size  Location     Type
  2287 ;;  byte            1    3[COMMON] unsigned char 
  2288 ;; Return value:  Size  Location     Type
  2289 ;;                  1    wreg      void 
  2290 ;; Registers used:
  2291 ;;		wreg, status,2, status,0
  2292 ;; Tracked objects:
  2293 ;;		On entry : 0/0
  2294 ;;		On exit  : 0/0
  2295 ;;		Unchanged: 0/0
  2296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2297 ;;      Params:         1       0       0       0       0
  2298 ;;      Locals:         1       0       0       0       0
  2299 ;;      Temps:          2       0       0       0       0
  2300 ;;      Totals:         4       0       0       0       0
  2301 ;;Total ram usage:        4 bytes
  2302 ;; Hardware stack levels used: 1
  2303 ;; This function calls:
  2304 ;;		Nothing
  2305 ;; This function is called by:
  2306 ;;		_init_display_controller
  2307 ;;		_clcd_print
  2308 ;;		_clcd_putch
  2309 ;; This function uses a non-reentrant model
  2310 ;;
  2311                           
  2312     0514                     _clcd_write:	
  2313                           ;psect for function _clcd_write
  2314                           
  2315                           
  2316                           ;incstack = 0
  2317                           ; Regs used in _clcd_write: [wreg+status,2+status,0]
  2318                           ;clcd_write@byte stored from wreg
  2319     0514  00F3               	movwf	clcd_write@byte
  2320     0515                     l975:
  2321                           
  2322                           ;clcd.c: 4: static void clcd_write(unsigned char byte, unsigned char mode);clcd.c: 5: {;
      +                          clcd.c: 6:     RE2 = mode;
  2323     0515  1870               	btfsc	clcd_write@mode,0
  2324     0516  2D18               	goto	u321
  2325     0517  2D1C               	goto	u320
  2326     0518                     u321:
  2327     0518  1283               	bcf	3,5	;RP0=0, select bank0
  2328     0519  1303               	bcf	3,6	;RP1=0, select bank0
  2329     051A  1509               	bsf	9,2	;volatile
  2330     051B  2D1F               	goto	u334
  2331     051C                     u320:
  2332     051C  1283               	bcf	3,5	;RP0=0, select bank0
  2333     051D  1303               	bcf	3,6	;RP1=0, select bank0
  2334     051E  1109               	bcf	9,2	;volatile
  2335     051F                     u334:
  2336     051F                     l977:
  2337                           
  2338                           ;clcd.c: 8:     PORTD = byte & 0xF0;
  2339     051F  0873               	movf	clcd_write@byte,w
  2340     0520  39F0               	andlw	240
  2341     0521  0088               	movwf	8	;volatile
  2342     0522                     l979:
  2343                           
  2344                           ;clcd.c: 9:     RE1 = 1;
  2345     0522  1489               	bsf	9,1	;volatile
  2346     0523                     l981:
  2347                           
  2348                           ;clcd.c: 10:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  2349     0523  30A6               	movlw	166
  2350     0524  00F1               	movwf	??_clcd_write
  2351     0525                     u737:
  2352     0525  0BF1               	decfsz	??_clcd_write,f
  2353     0526  2D25               	goto	u737
  2354     0527  0000               	nop
  2355     0528                     l983:
  2356                           
  2357                           ;clcd.c: 11:     RE1 = 0;
  2358     0528  1283               	bcf	3,5	;RP0=0, select bank0
  2359     0529  1303               	bcf	3,6	;RP1=0, select bank0
  2360     052A  1089               	bcf	9,1	;volatile
  2361     052B                     l985:
  2362                           
  2363                           ;clcd.c: 13:     PORTD = (byte & 0x0F) << 4;
  2364     052B  0873               	movf	clcd_write@byte,w
  2365     052C  390F               	andlw	15
  2366     052D  00F1               	movwf	??_clcd_write
  2367     052E  3003               	movlw	3
  2368     052F                     u345:
  2369     052F  1003               	clrc
  2370     0530  0DF1               	rlf	??_clcd_write,f
  2371     0531  3EFF               	addlw	-1
  2372     0532  1D03               	skipz
  2373     0533  2D2F               	goto	u345
  2374     0534  1003               	clrc
  2375     0535  0D71               	rlf	??_clcd_write,w
  2376     0536  0088               	movwf	8	;volatile
  2377     0537                     l987:
  2378                           
  2379                           ;clcd.c: 14:     RE1 = 1;
  2380     0537  1489               	bsf	9,1	;volatile
  2381     0538                     l989:
  2382                           
  2383                           ;clcd.c: 15:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  2384     0538  30A6               	movlw	166
  2385     0539  00F1               	movwf	??_clcd_write
  2386     053A                     u747:
  2387     053A  0BF1               	decfsz	??_clcd_write,f
  2388     053B  2D3A               	goto	u747
  2389     053C  0000               	nop
  2390     053D                     l991:
  2391                           
  2392                           ;clcd.c: 16:     RE1 = 0;
  2393     053D  1283               	bcf	3,5	;RP0=0, select bank0
  2394     053E  1303               	bcf	3,6	;RP1=0, select bank0
  2395     053F  1089               	bcf	9,1	;volatile
  2396     0540                     l993:
  2397                           
  2398                           ;clcd.c: 18:     _delay((unsigned long)((4100)*(20000000/4000000.0)));
  2399     0540  301B               	movlw	27
  2400     0541  00F2               	movwf	??_clcd_write+1
  2401     0542  309E               	movlw	158
  2402     0543  00F1               	movwf	??_clcd_write
  2403     0544                     u757:
  2404     0544  0BF1               	decfsz	??_clcd_write,f
  2405     0545  2D44               	goto	u757
  2406     0546  0BF2               	decfsz	??_clcd_write+1,f
  2407     0547  2D44               	goto	u757
  2408     0548  0000               	nop
  2409     0549                     l17:
  2410     0549  0008               	return
  2411     054A                     __end_of_clcd_write:
  2412     007E                     btemp	set	126	;btemp
  2413     007E                     wtemp0	set	126
  2414                           
  2415                           	psect	config
  2416                           
  2417                           ;Config register CONFIG @ 0x2007
  2418                           ;	Oscillator Selection bits
  2419                           ;	FOSC = 0x3, unprogrammed default
  2420                           ;	Watchdog Timer Enable bit
  2421                           ;	WDTE = OFF, WDT disabled
  2422                           ;	Power-up Timer Enable bit
  2423                           ;	PWRTE = 0x1, unprogrammed default
  2424                           ;	Brown-out Reset Enable bit
  2425                           ;	BOREN = 0x1, unprogrammed default
  2426                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  2427                           ;	LVP = 0x1, unprogrammed default
  2428                           ;	Data EEPROM Memory Code Protection bit
  2429                           ;	CPD = 0x1, unprogrammed default
  2430                           ;	Flash Program Memory Write Enable bits
  2431                           ;	WRT = 0x3, unprogrammed default
  2432                           ;	In-Circuit Debugger Mode bit
  2433                           ;	DEBUG = 0x1, unprogrammed default
  2434                           ;	Flash Program Memory Code Protection bit
  2435                           ;	CP = 0x1, unprogrammed default
  2436     2007                     	org	8199
  2437     2007  3FFB               	dw	16379

Data Sizes:
    Strings     17
    Constant    0
    Data        0
    BSS         124
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     47      64
    BANK1            80      0      17
    BANK3            96     90      90
    BANK2            96      0      90

Pointer List with Targets:

    strncpy@from	PTR const unsigned char  size(1) Largest target is 1
		 -> STR_4(CODE[1]), STR_3(CODE[1]), STR_2(CODE[1]), 

    strncpy@to	PTR unsigned char  size(2) Largest target is 90
		 -> main@str2(BANK0[17]), main@str1(BANK0[17]), main@str(BANK3[90]), 

    strncpy@cp	PTR unsigned char  size(2) Largest target is 90
		 -> main@str2(BANK0[17]), main@str1(BANK0[17]), main@str(BANK3[90]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 90
		 -> main@str2(BANK0[17]), main@str1(BANK0[17]), main@str(BANK3[90]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 90
		 -> main@str2(BANK0[17]), main@str1(BANK0[17]), main@str(BANK3[90]), 

    gets@string	PTR unsigned char  size(1) Largest target is 90
		 -> main@str(BANK3[90]), 

    puts@s	PTR const unsigned char  size(2) Largest target is 90
		 -> main@str(BANK3[90]), STR_1(CODE[17]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 90
		 -> main@str2(BANK0[17]), main@str1(BANK0[17]), main@str(BANK3[90]), 

    clcd_print@str	PTR const unsigned char  size(1) Largest target is 17
		 -> main@str2(BANK0[17]), main@str1(BANK0[17]), 


Critical Paths under _main in COMMON

    _main->_strncpy
    _strncpy->_strlen
    _puts->_putchar
    _init_uart->___lldiv
    _init_clcd->_init_display_controller
    _init_display_controller->_clcd_write
    _clcd_print->_clcd_write

Critical Paths under _main in BANK0

    _init_config->_init_uart

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               134   134      0    5225
                                              8 BANK0     39    39      0
                                              0 BANK3     90    90      0
                         _clcd_print
                _clcd_write@main$F83
                               _gets
                        _init_config
                               _puts
                             _strlen
                            _strncpy
 ---------------------------------------------------------------------------------
 (2) _strncpy                                             10     5      5     825
                                              4 COMMON    10     5      5
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (1) _strlen                                               4     2      2     394
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _init_config                                          0     0      0    1533
                          _init_clcd
                          _init_uart
                               _puts
 ---------------------------------------------------------------------------------
 (1) _puts                                                 2     0      2     219
                                              1 COMMON     2     0      2
                            _putchar
 ---------------------------------------------------------------------------------
 (2) _putchar                                              1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            8     4      4     412
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     314
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (2) _init_clcd                                            0     0      0     902
            _init_display_controller
 ---------------------------------------------------------------------------------
 (3) _init_display_controller                              2     2      0     902
                                              4 COMMON     2     2      0
                         _clcd_write
 ---------------------------------------------------------------------------------
 (1) _gets                                                 4     4      0     192
                                              0 COMMON     4     4      0
                            _getchar
 ---------------------------------------------------------------------------------
 (2) _getchar                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clcd_write@main$F83                                  4     3      1     142
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _clcd_print                                           3     2      1    1187
                                              4 COMMON     3     2      1
                         _clcd_write
 ---------------------------------------------------------------------------------
 (4) _clcd_write                                           4     3      1     902
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clcd_print
     _clcd_write
   _clcd_write@main$F83
   _gets
     _getchar
   _init_config
     _init_clcd
       _init_display_controller
         _clcd_write
     _init_uart
       ___lldiv
     _puts
       _putchar
   _puts
   _strlen
   _strncpy
     _strlen (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0     113       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2F      40       5       80.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      11       7       21.2%
BITBANK3            60      0       0       8        0.0%
BANK3               60     5A      5A       9       93.8%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0      5A      11       93.8%
DATA                 0      0     113      12        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Oct 11 13:18:46 2022

                              pc 0002                   clcd_print@addr 0074                               l20 0664  
                             l23 045A                               l32 04A3                               l17 0549  
                             l61 057F                               l64 04C3                               fsr 0004  
                            l111 0447                              l120 0465                              l113 044D  
                            l114 044F                              l131 0513                              l108 05B5  
                            l118 0460                              l126 04E9                              l119 0464  
                            l253 06CA                              l671 0483                              l681 0601  
                            l981 0523                              l991 053D                              l983 0528  
                            l975 0515                              l993 0540                              l985 052B  
                            l977 051F                              l987 0537                              l979 0522  
                            l995 0602                              _GIE 005F                              l989 0538  
                            l997 060A                              l999 0611                              _RE1 0049  
                            _RE2 004A                              u320 051C                              u400 06A4  
                            u321 0518                              u401 06A3                              u500 0509  
                            u420 06C2                              u501 0508                              u421 06C1  
                            u405 06A0                              u334 051F                              u430 0598  
                            u350 0464                              u510 047B                              u415 06B4  
                            u351 0463                              u511 047A                              u360 0675  
                            u440 04E9                              u520 05DF                              u600 076E  
                            u345 052F                              u361 0674                              u441 04E8  
                            u521 05DE                              u601 076D                              u450 044D  
                            u530 05E6                              u610 0785                              u451 044C  
                            u435 0593                              u531 05E5                              u611 0784  
                            u460 04A3                              u380 0689                              u540 0601  
                            u620 07AD                              u461 04A2                              u381 0688  
                            u541 0600                              u621 07AC                              u470 0552  
                            u550 06CF                              u471 054E                              u375 067A  
                            u560 06D8                              u625 07A9                              u570 06E1  
                            u707 055B                              u395 068B                              u484 0555  
                            u580 0711                              u717 0570                              u637 0606  
                            u581 0710                              u590 074B                              u727 057A  
                            u495 0565                              u647 0615                              u591 074A  
                            u737 0525                              u657 0623                              u747 053A  
                            u667 0639                              u757 0544                              u677 0645  
                            u687 0653                              u697 0661                              fsr0 0004  
                            indf 0000                             l1001 0621                             l1011 0643  
                           l1003 0626                             l1013 0648                             l1005 062D  
                           l1021 0665                             l1101 04B8                             l1111 04F8  
                           l1015 0658                             l1007 0630                             l1031 0692  
                           l1023 0675                             l1103 04C1                             l1113 04FF  
                           l1017 065F                             l1009 0637                             l1033 06A4  
                           l1025 0678                             l1041 06C2                             l1105 04C2  
                           l1121 0466                             l1201 07AD                             l1115 0503  
                           l1107 04EB                             l1051 0455                             l1035 06B2  
                           l1027 0685                             l1019 045C                             l1123 046B  
                           l1131 05B6                             l1203 07AF                             l1117 0509  
                           l1109 04EC                             l1045 0450                             l1037 06B3  
                           l1029 0689                             l1053 0580                             l1061 04D3  
                           l1125 0471                             l1141 05E7                             l1133 05BB  
                           l1205 07C7                             l1071 0485                             l1119 050D  
                           l1047 0453                             l1039 06BC                             l1055 058A  
                           l1063 04D9                             l1127 047B                             l1143 05ED  
                           l1135 05C1                             l1207 07CE                             l1151 06CB  
                           l1073 048D                             l1081 0555                             l1065 0447  
                           l1049 0454                             l1057 04C4                             l1145 05F3  
                           l1209 07D6                             l1161 06E9                             l1153 06D4  
                           l1075 0497                             l1091 056D                             l1083 0558  
                           l1067 044E                             l1059 04C5                             l1139 05E0  
                           l1171 0711                             l1163 06EE                             l1155 06DD  
                           l1077 049B                             l1093 056E                             l1085 0559  
                           l1181 0731                             l1173 0715                             l1165 06F4  
                           l1157 06E5                             l1149 06CB                             l1095 0573  
                           l1087 055E                             l1079 054B                             l1191 076E  
                           l1183 073C                             l1175 072D                             l1167 06FD  
                           l1159 06E5                             l1097 0576                             l1089 0561  
                           l1193 077C                             l1185 0742                             l1169 0702  
                           l1099 04A4                             l1195 0785                             l1187 074B  
                           l1197 0792                             l1189 0763                             l1199 0798  
                           STR_1 0013                             STR_2 0023                             STR_3 0023  
                           STR_4 0023                             _BRGH 04C2                             _CREN 00C4  
                           _PEIE 005E                             _RCIF 0065                             _SPEN 00C7  
                           _TXEN 04C5                             _TXIF 0064                             _gets 04EA  
                           _main 06CB                             btemp 007E                             _puts 04C4  
                           start 0000                   clcd_write@byte 0073                   clcd_write@mode 0070  
                          ?_gets 0070                            ?_main 0070                            ?_puts 0071  
                __end_of___lldiv 06CB                     ?_init_config 0070                            _RCREG 001A  
                          _SPBRG 0099                            _PORTD 0008                            _TRISD 0088  
                          _TXREG 0019                  __end_of_getchar 0450                            gets@J 0071  
                          gets@i 0073                            main@i 004D                            pclath 000A  
                          puts@s 0071                  __end_of_putchar 0466                            status 0003  
                          wtemp0 007E                  __end_of_strncpy 0602                  __initialization 07E2  
                   __end_of_gets 0514                     __end_of_main 07E2                     __end_of_puts 04EA  
                         ??_gets 0070                           ??_main 0028                           ??_puts 0073  
                         _TRISE1 0449                           _TRISE2 044A          _init_display_controller 0602  
                      ??___lldiv 0078                        ??_getchar 0070                           _strlen 0466  
                      ??_putchar 0070                        ??_strncpy 0079          __end_of__initialization 07FC  
                 __pcstackCOMMON 0070                       __pbssBANK0 004F                       __pbssBANK1 00A0  
                     __pbssBANK2 0110        ??_init_display_controller 0074                       _clcd_print 0484  
                     _clcd_write 0514                       __pmaintext 06CB                          ?_strlen 0070  
                     __stringtab 0003                          ___lldiv 0665                          __ptext1 05B6  
                        __ptext2 0466                          __ptext3 04A4                          __ptext4 04C4  
                        __ptext5 045B                          __ptext6 0580                          __ptext7 0665  
                        __ptext8 0450                          __ptext9 0602                          _getchar 0447  
__end_of_init_display_controller 0665                __end_of_init_clcd 045B                __end_of_init_uart 05B6  
            _clcd_write@main$F83 054A                          _putchar 045B                          clrloop0 0440  
                        main@str 0190                          _strncpy 05B6             end_of_initialization 07FC  
                    ?_clcd_print 0074                  ___lldiv@divisor 0070                      ?_clcd_write 0070  
                ___lldiv@counter 007D             ?_clcd_write@main$F83 0070                          strlen@s 0070  
                  clcd_print@str 0076                       gets@string 0072            ??_clcd_write@main$F83 0071  
                 __end_of_strlen 0484              start_initialization 07E2          clcd_write@main$F83@byte 0073  
        clcd_write@main$F83@mode 0070                      putchar@data 0070                         ??_strlen 0072  
                  ??_init_config 007E                        ___latbits 0002                    __pcstackBANK0 0020  
                  __pcstackBANK3 0190                         ?___lldiv 0070                        __pstrings 0003  
                       ?_getchar 0070                         ?_putchar 0070                        _init_clcd 0450  
            __end_of_init_config 04C4                        _init_uart 0580                         ?_strncpy 0074  
       ?_init_display_controller 0070                        clear_ram0 043F                      strncpy@from 0076  
                    strncpy@size 0077                     ??_clcd_print 0075                     ??_clcd_write 0071  
                    __stringbase 0012                        main@count 004B               __end_of_clcd_print 04A4  
             __end_of_clcd_write 054A                       ?_init_clcd 0070                       ?_init_uart 0020  
             __end_of__stringtab 0013                      _init_config 04A4                         __ptext10 04EA  
                       __ptext11 0447                         __ptext12 054A                         __ptext13 0484  
                       __ptext14 0514      __end_of_clcd_write@main$F83 0580                         main@F961 004F  
                       main@F963 00A0                         main@F959 0110                         main@str1 003A  
                       main@str2 0029                      ??_init_clcd 0076                      ??_init_uart 0024  
                  init_uart@baud 0020                 ___lldiv@dividend 0074                        stringcode 000D  
                      strncpy@cp 007C                        strncpy@to 0074                 ___lldiv@quotient 0079  
                       strlen@cp 0072                         stringdir 000D                         stringtab 0003  
